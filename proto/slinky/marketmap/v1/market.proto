syntax = "proto3";
package slinky.marketmap.v1;

option go_package = "github.com/skip-mev/slinky/x/marketmap/types";

import "gogoproto/gogo.proto";
import "slinky/types/v1/currency_pair.proto";

// Ticker represents a price feed for a given asset pair i.e. BTC/USD. The price
// feed is scaled to a number of decimal places and has a minimum number of
// providers required to consider the ticker valid.
message Ticker {
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer) = false;

  // CurrencyPair is the currency pair for this ticker.
  slinky.types.v1.CurrencyPair currency_pair = 1
      [ (gogoproto.nullable) = false ];

  // Decimals is the number of decimal places for the ticker. The number of
  // decimal places is used to convert the price to a human-readable format.
  uint64 decimals = 2;

  // MinProviderCount is the minimum number of providers required to consider
  // the ticker valid.
  uint64 min_provider_count = 3;

  // Enabled is the flag that denotes if the Ticker is enabled for price
  // fetching by an oracle.
  bool enabled = 14;

  // MetadataJSON is a string of JSON that encodes any extra configuration
  // for the given ticker.
  string metadata_JSON = 15;
}

message ProviderConfig {
  // Name corresponds to the name of the provider for which the configuration is
  // being set.
  string name = 1;

  // OffChainTicker is the off-chain representation of the ticker i.e. BTC/USD.
  // The off-chain ticker is unique to a given provider and is used to fetch the
  // price of the ticker from the provider.
  string off_chain_ticker = 2;
}

// Path is the list of convertable markets that will be used to convert the
// prices of a set of tickers to a common ticker.
message Path {
  // Operations is an ordered list of operations that will be taken. These must
  // be topologically sorted to ensure that the conversion is possible i.e. DAG.
  repeated Operation operations = 1 [ (gogoproto.nullable) = false ];
}

// Operation represents the operation configuration for a given ticker.
message Operation {
  // CurrencyPair is the on-chain currency pair for this ticker.
  slinky.types.v1.CurrencyPair currency_pair = 1
      [ (gogoproto.nullable) = false ];

  // Invert is a boolean that indicates whether the price of the ticker should
  // be inverted.
  bool invert = 2;

  // Provider is the name of the provider that will be used to fetch the price
  // of the ticker.
  string provider = 3;
}

message Paths {
  // Paths is the list of convertable markets that will be used to convert the
  // prices of a set of tickers to a common ticker.
  repeated Path paths = 1 [ (gogoproto.nullable) = false ];
}

message Providers {
  // Providers is the list of provider configurations for the given ticker.
  repeated ProviderConfig providers = 1 [ (gogoproto.nullable) = false ];
}

// AggregationType is the type of aggregation that will be used to aggregate the
// prices of the tickers.
enum AggregationType {
  // UNKOWN_AGGREGATION_TYPE is the default value for the aggregation type.
  UNKNOWN_AGGREGATION_TYPE = 0;

  // IndexPriceAggregation is the type of aggregation that will be used to
  // aggregate the prices of the tickers. Specifically, this converts the prices
  // either directly or using the index price to a common currency pair.
  INDEX_PRICE_AGGREGATION = 1;

  // StandardMedianAggregation is the type of aggregation that will be used to
  // aggregate the prices of the tickers. Specifically, this converts the prices
  // to a common currency pair and then takes the median of the prices. No
  // conversions are done if the prices are already in the common currency pair.
  STANDARD_MEDIAN_AGGREGATION = 2;
}

message MarketMap {
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.stringer) = false;

  // Tickers is the full list of tickers and their associated configurations
  // to be stored on-chain.
  map<string, Ticker> tickers = 1 [ (gogoproto.nullable) = false ];

  // Paths is a map from CurrencyPair to all paths that resolve to that pair
  map<string, Paths> paths = 2 [ (gogoproto.nullable) = false ];

  // Providers is a map from CurrencyPair to each of to provider-specific
  // configs associated with it.
  map<string, Providers> providers = 3 [ (gogoproto.nullable) = false ];

  // AggregationType is the type of aggregation that will be used to aggregate
  // the prices of the tickers.
  AggregationType aggregation_type = 4;
}
