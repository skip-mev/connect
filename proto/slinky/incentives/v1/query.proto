syntax = "proto3";
package slinky.incentives.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "slinky/incentives/v1/genesis.proto";

option go_package = "github.com/skip-mev/slinky/x/incentives/types";

// Query is the query service for the x/incentives module.
service Query {
  // GetIncentivesByType returns all incentives of a given type. If the type is
  // not registered with the module, an error is returned.
  rpc GetIncentivesByType(GetIncentivesByTypeRequest)
      returns (GetIncentivesByTypeResponse) {
    option (google.api.http).get =
        "/slinky/incentives/v1/get_incentives_by_type/{incentive_type}";
  }

  // GetAllIncentives returns all incentives.
  rpc GetAllIncentives(GetAllIncentivesRequest)
      returns (GetAllIncentivesResponse) {
    option (google.api.http).get = "/slinky/incentives/v1/get_all_incentives";
  }
}

// GetIncentivesByTypeRequest is the request type for the
// Query/GetIncentivesByType RPC method.
message GetIncentivesByTypeRequest {
  // IncentiveType is the incentive type i.e. (BadPriceIncentiveType,
  // GoodPriceIncentiveType).
  string incentive_type = 1;
}

// GetIncentivesByTypeResponse is the response type for the
// Query/GetIncentivesByType RPC method.
message GetIncentivesByTypeResponse {
  // Entries is the list of incentives of the given type.
  repeated bytes entries = 1;
}

// GetAllIncentivesRequest is the request type for the Query/GetAllIncentives
// RPC method.
message GetAllIncentivesRequest {}

// GetAllIncentivesResponse is the response type for the Query/GetAllIncentives
// RPC method.
message GetAllIncentivesResponse {
  // Registry is the list of all incentives, grouped by type.
  repeated IncentivesByType registry = 1 [ (gogoproto.nullable) = false ];
}