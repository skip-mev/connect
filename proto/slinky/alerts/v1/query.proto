syntax = "proto3";
package slinky.alerts.v1;

import "google/api/annotations.proto";
import "slinky/alerts/v1/alerts.proto";
import "slinky/alerts/v1/genesis.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/skip-mev/connect/v2/x/alerts/types";

// Query is the query service for the x/alerts module.
service Query {
  // Alerts gets all alerts in state under the given status. If no status is
  // given, all Alerts are returned
  rpc Alerts(AlertsRequest) returns (AlertsResponse) {
    option (google.api.http) = {
      get : "/slinky/alerts/v1/alerts"
    };
  }

  rpc Params(ParamsRequest) returns (ParamsResponse) {
    option (google.api.http) = {
      get : "/slinky/alerts/v1/params"
    };
  }
}

// AlertStatus is the type for the status of an Alert, it can be Unconcluded or
// Concluded.
enum AlertStatusID {
  CONCLUSION_STATUS_UNSPECIFIED = 0;
  CONCLUSION_STATUS_UNCONCLUDED = 1;
  CONCLUSION_STATUS_CONCLUDED = 2;
}

// AlertsRequest is the request type for the Query.Alerts RPC method, the status
// field indicates whether the request should return only Unconcluded /
// Concluded Alerts, or all Alerts.
message AlertsRequest { AlertStatusID status = 1; }

// AlertsResponse is the response type for the Query.Alerts RPC method, it
// contains the list of Alerts that are being tracked by the alerts module.
message AlertsResponse {
  repeated Alert alerts = 1 [ (gogoproto.nullable) = false ];
}

// ParamsRequest is the request type for the Query.Params RPC method.
message ParamsRequest {}

// ParamsResponse is the response type for the Query.Params RPC method, it
// contains the Params of the module.
message ParamsResponse { Params params = 1 [ (gogoproto.nullable) = false ]; }
