syntax = "proto3";
package slinky.alerts.v1;

import "slinky/alerts/v1/alerts.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "slinky/alerts/v1/genesis.proto";

option go_package = "github.com/skip-mev/slinky/x/alerts/types";

// Msg is the message service for the x/alerts module.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // Alert creates a new alert. On alert creation (if valid), the alert will be
  // saved to state, and its bond will be escrowed until a corresponding
  // Conclusion is filed to close the alert.
  rpc Alert(MsgAlert) returns (MsgAlertResponse);

  // Conclusion closes an alert. On alert conclusion (if valid), the alert will
  // be marked as Concluded, the bond for the alert will either be burned or
  // returned, and a set of incentives will be issued to the validators deemed
  // malicious by the conclusion.
  rpc Conclusion(MsgConclusion) returns (MsgConclusionResponse);

  // UpdateParams updates the parameters of the alerts module. Specifically, the
  // only address that is capable of submitting this Msg is the
  // module-authority, in general, the x/gov module-account. The process for
  // executing this message will be via governance proposal
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgAlert defines a message to create an alert.
message MsgAlert {
  option (amino.name) = "slinky/x/alerts/MsgAlert";

  option (gogoproto.equal) = false;

  // alert is the alert to be filed
  Alert alert = 1 [ (gogoproto.nullable) = false ];
}

message MsgAlertResponse {}

// MsgConclusion defines a message carrying a Conclusion made by the SecondTier,
// which will be used to close an alert. And trigger any ramifications of the
// conclusion.
message MsgConclusion {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "slinky/x/alerts/MsgConclusion";

  option (gogoproto.equal) = false;

  // signer is the signer of this transaction (notice, this may not always be a
  // node from the SecondTier)
  string signer = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // conclusion is the conclusion to be filed
  google.protobuf.Any conclusion = 2
      [ (cosmos_proto.accepts_interface) = "slinky.alerts.v1.Conclusion" ];
}

message MsgConclusionResponse {}

// MsgUpdateParams defines the message type expected by the UpdateParams rpc. It
// contains an authority address, and the new Params for the x/alerts module.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "slinky/x/alerts/MsgUpdateParams";

  option (gogoproto.equal) = false;

  // authority is the address of the authority that is submitting the update
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params is the new set of parameters for the x/alerts module
  Params params = 2 [ (gogoproto.nullable) = false ];
}

message MsgUpdateParamsResponse {}