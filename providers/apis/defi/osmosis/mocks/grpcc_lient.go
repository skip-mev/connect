// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	queryproto "github.com/skip-mev/slinky/providers/apis/defi/osmosis/queryproto"
)

// GRPCCLient is an autogenerated mock type for the GRPCCLient type
type GRPCCLient struct {
	mock.Mock
}

// SpotPrice provides a mock function with given fields: grpcCtx, req
func (_m *GRPCCLient) SpotPrice(grpcCtx context.Context, req *queryproto.SpotPriceRequest) (*queryproto.SpotPriceResponse, error) {
	ret := _m.Called(grpcCtx, req)

	if len(ret) == 0 {
		panic("no return value specified for SpotPrice")
	}

	var r0 *queryproto.SpotPriceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *queryproto.SpotPriceRequest) (*queryproto.SpotPriceResponse, error)); ok {
		return rf(grpcCtx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *queryproto.SpotPriceRequest) *queryproto.SpotPriceResponse); ok {
		r0 = rf(grpcCtx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*queryproto.SpotPriceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *queryproto.SpotPriceRequest) error); ok {
		r1 = rf(grpcCtx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGRPCCLient creates a new instance of GRPCCLient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGRPCCLient(t interface {
	mock.TestingT
	Cleanup(func())
}) *GRPCCLient {
	mock := &GRPCCLient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
