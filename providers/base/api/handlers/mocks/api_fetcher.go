// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/skip-mev/slinky/providers/types"
)

// APIFetcher is an autogenerated mock type for the APIFetcher type
type APIFetcher[K types.ResponseKey, V types.ResponseValue] struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: ctx, ids
func (_m *APIFetcher[K, V]) Fetch(ctx context.Context, ids []K) types.GetResponse[K, V] {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 types.GetResponse[K, V]
	if rf, ok := ret.Get(0).(func(context.Context, []K) types.GetResponse[K, V]); ok {
		r0 = rf(ctx, ids)
	} else {
		r0 = ret.Get(0).(types.GetResponse[K, V])
	}

	return r0
}

// NewAPIFetcher creates a new instance of APIFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPIFetcher[K types.ResponseKey, V types.ResponseValue](t interface {
	mock.TestingT
	Cleanup(func())
}) *APIFetcher[K, V] {
	mock := &APIFetcher[K, V]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
