// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	big "math/big"

	mock "github.com/stretchr/testify/mock"

	pkgtypes "github.com/skip-mev/connect/v2/pkg/types"

	types "github.com/cosmos/cosmos-sdk/types"
)

// CurrencyPairStrategy is an autogenerated mock type for the CurrencyPairStrategy type
type CurrencyPairStrategy struct {
	mock.Mock
}

type CurrencyPairStrategy_Expecter struct {
	mock *mock.Mock
}

func (_m *CurrencyPairStrategy) EXPECT() *CurrencyPairStrategy_Expecter {
	return &CurrencyPairStrategy_Expecter{mock: &_m.Mock}
}

// FromID provides a mock function with given fields: ctx, id
func (_m *CurrencyPairStrategy) FromID(ctx types.Context, id uint64) (pkgtypes.CurrencyPair, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FromID")
	}

	var r0 pkgtypes.CurrencyPair
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, uint64) (pkgtypes.CurrencyPair, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(types.Context, uint64) pkgtypes.CurrencyPair); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(pkgtypes.CurrencyPair)
	}

	if rf, ok := ret.Get(1).(func(types.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CurrencyPairStrategy_FromID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromID'
type CurrencyPairStrategy_FromID_Call struct {
	*mock.Call
}

// FromID is a helper method to define mock.On call
//   - ctx types.Context
//   - id uint64
func (_e *CurrencyPairStrategy_Expecter) FromID(ctx interface{}, id interface{}) *CurrencyPairStrategy_FromID_Call {
	return &CurrencyPairStrategy_FromID_Call{Call: _e.mock.On("FromID", ctx, id)}
}

func (_c *CurrencyPairStrategy_FromID_Call) Run(run func(ctx types.Context, id uint64)) *CurrencyPairStrategy_FromID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(uint64))
	})
	return _c
}

func (_c *CurrencyPairStrategy_FromID_Call) Return(_a0 pkgtypes.CurrencyPair, _a1 error) *CurrencyPairStrategy_FromID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CurrencyPairStrategy_FromID_Call) RunAndReturn(run func(types.Context, uint64) (pkgtypes.CurrencyPair, error)) *CurrencyPairStrategy_FromID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDecodedPrice provides a mock function with given fields: ctx, cp, priceBytes
func (_m *CurrencyPairStrategy) GetDecodedPrice(ctx types.Context, cp pkgtypes.CurrencyPair, priceBytes []byte) (*big.Int, error) {
	ret := _m.Called(ctx, cp, priceBytes)

	if len(ret) == 0 {
		panic("no return value specified for GetDecodedPrice")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, pkgtypes.CurrencyPair, []byte) (*big.Int, error)); ok {
		return rf(ctx, cp, priceBytes)
	}
	if rf, ok := ret.Get(0).(func(types.Context, pkgtypes.CurrencyPair, []byte) *big.Int); ok {
		r0 = rf(ctx, cp, priceBytes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context, pkgtypes.CurrencyPair, []byte) error); ok {
		r1 = rf(ctx, cp, priceBytes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CurrencyPairStrategy_GetDecodedPrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDecodedPrice'
type CurrencyPairStrategy_GetDecodedPrice_Call struct {
	*mock.Call
}

// GetDecodedPrice is a helper method to define mock.On call
//   - ctx types.Context
//   - cp pkgtypes.CurrencyPair
//   - priceBytes []byte
func (_e *CurrencyPairStrategy_Expecter) GetDecodedPrice(ctx interface{}, cp interface{}, priceBytes interface{}) *CurrencyPairStrategy_GetDecodedPrice_Call {
	return &CurrencyPairStrategy_GetDecodedPrice_Call{Call: _e.mock.On("GetDecodedPrice", ctx, cp, priceBytes)}
}

func (_c *CurrencyPairStrategy_GetDecodedPrice_Call) Run(run func(ctx types.Context, cp pkgtypes.CurrencyPair, priceBytes []byte)) *CurrencyPairStrategy_GetDecodedPrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(pkgtypes.CurrencyPair), args[2].([]byte))
	})
	return _c
}

func (_c *CurrencyPairStrategy_GetDecodedPrice_Call) Return(_a0 *big.Int, _a1 error) *CurrencyPairStrategy_GetDecodedPrice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CurrencyPairStrategy_GetDecodedPrice_Call) RunAndReturn(run func(types.Context, pkgtypes.CurrencyPair, []byte) (*big.Int, error)) *CurrencyPairStrategy_GetDecodedPrice_Call {
	_c.Call.Return(run)
	return _c
}

// GetEncodedPrice provides a mock function with given fields: ctx, cp, price
func (_m *CurrencyPairStrategy) GetEncodedPrice(ctx types.Context, cp pkgtypes.CurrencyPair, price *big.Int) ([]byte, error) {
	ret := _m.Called(ctx, cp, price)

	if len(ret) == 0 {
		panic("no return value specified for GetEncodedPrice")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, pkgtypes.CurrencyPair, *big.Int) ([]byte, error)); ok {
		return rf(ctx, cp, price)
	}
	if rf, ok := ret.Get(0).(func(types.Context, pkgtypes.CurrencyPair, *big.Int) []byte); ok {
		r0 = rf(ctx, cp, price)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context, pkgtypes.CurrencyPair, *big.Int) error); ok {
		r1 = rf(ctx, cp, price)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CurrencyPairStrategy_GetEncodedPrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEncodedPrice'
type CurrencyPairStrategy_GetEncodedPrice_Call struct {
	*mock.Call
}

// GetEncodedPrice is a helper method to define mock.On call
//   - ctx types.Context
//   - cp pkgtypes.CurrencyPair
//   - price *big.Int
func (_e *CurrencyPairStrategy_Expecter) GetEncodedPrice(ctx interface{}, cp interface{}, price interface{}) *CurrencyPairStrategy_GetEncodedPrice_Call {
	return &CurrencyPairStrategy_GetEncodedPrice_Call{Call: _e.mock.On("GetEncodedPrice", ctx, cp, price)}
}

func (_c *CurrencyPairStrategy_GetEncodedPrice_Call) Run(run func(ctx types.Context, cp pkgtypes.CurrencyPair, price *big.Int)) *CurrencyPairStrategy_GetEncodedPrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(pkgtypes.CurrencyPair), args[2].(*big.Int))
	})
	return _c
}

func (_c *CurrencyPairStrategy_GetEncodedPrice_Call) Return(_a0 []byte, _a1 error) *CurrencyPairStrategy_GetEncodedPrice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CurrencyPairStrategy_GetEncodedPrice_Call) RunAndReturn(run func(types.Context, pkgtypes.CurrencyPair, *big.Int) ([]byte, error)) *CurrencyPairStrategy_GetEncodedPrice_Call {
	_c.Call.Return(run)
	return _c
}

// GetMaxNumCP provides a mock function with given fields: ctx
func (_m *CurrencyPairStrategy) GetMaxNumCP(ctx types.Context) (uint64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetMaxNumCP")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(types.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(types.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CurrencyPairStrategy_GetMaxNumCP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMaxNumCP'
type CurrencyPairStrategy_GetMaxNumCP_Call struct {
	*mock.Call
}

// GetMaxNumCP is a helper method to define mock.On call
//   - ctx types.Context
func (_e *CurrencyPairStrategy_Expecter) GetMaxNumCP(ctx interface{}) *CurrencyPairStrategy_GetMaxNumCP_Call {
	return &CurrencyPairStrategy_GetMaxNumCP_Call{Call: _e.mock.On("GetMaxNumCP", ctx)}
}

func (_c *CurrencyPairStrategy_GetMaxNumCP_Call) Run(run func(ctx types.Context)) *CurrencyPairStrategy_GetMaxNumCP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context))
	})
	return _c
}

func (_c *CurrencyPairStrategy_GetMaxNumCP_Call) Return(_a0 uint64, _a1 error) *CurrencyPairStrategy_GetMaxNumCP_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CurrencyPairStrategy_GetMaxNumCP_Call) RunAndReturn(run func(types.Context) (uint64, error)) *CurrencyPairStrategy_GetMaxNumCP_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with given fields: ctx, cp
func (_m *CurrencyPairStrategy) ID(ctx types.Context, cp pkgtypes.CurrencyPair) (uint64, error) {
	ret := _m.Called(ctx, cp)

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, pkgtypes.CurrencyPair) (uint64, error)); ok {
		return rf(ctx, cp)
	}
	if rf, ok := ret.Get(0).(func(types.Context, pkgtypes.CurrencyPair) uint64); ok {
		r0 = rf(ctx, cp)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(types.Context, pkgtypes.CurrencyPair) error); ok {
		r1 = rf(ctx, cp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CurrencyPairStrategy_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type CurrencyPairStrategy_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
//   - ctx types.Context
//   - cp pkgtypes.CurrencyPair
func (_e *CurrencyPairStrategy_Expecter) ID(ctx interface{}, cp interface{}) *CurrencyPairStrategy_ID_Call {
	return &CurrencyPairStrategy_ID_Call{Call: _e.mock.On("ID", ctx, cp)}
}

func (_c *CurrencyPairStrategy_ID_Call) Run(run func(ctx types.Context, cp pkgtypes.CurrencyPair)) *CurrencyPairStrategy_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(pkgtypes.CurrencyPair))
	})
	return _c
}

func (_c *CurrencyPairStrategy_ID_Call) Return(_a0 uint64, _a1 error) *CurrencyPairStrategy_ID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CurrencyPairStrategy_ID_Call) RunAndReturn(run func(types.Context, pkgtypes.CurrencyPair) (uint64, error)) *CurrencyPairStrategy_ID_Call {
	_c.Call.Return(run)
	return _c
}

// NewCurrencyPairStrategy creates a new instance of CurrencyPairStrategy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCurrencyPairStrategy(t interface {
	mock.TestingT
	Cleanup(func())
}) *CurrencyPairStrategy {
	mock := &CurrencyPairStrategy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
