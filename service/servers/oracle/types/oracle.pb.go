// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: slinky/service/v1/oracle.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	types "github.com/skip-mev/slinky/x/marketmap/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryPricesRequest defines the request type for the the Prices method.
type QueryPricesRequest struct {
}

func (m *QueryPricesRequest) Reset()         { *m = QueryPricesRequest{} }
func (m *QueryPricesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPricesRequest) ProtoMessage()    {}
func (*QueryPricesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88883d464f0f25b, []int{0}
}
func (m *QueryPricesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPricesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPricesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPricesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPricesRequest.Merge(m, src)
}
func (m *QueryPricesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPricesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPricesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPricesRequest proto.InternalMessageInfo

// QueryPricesResponse defines the response type for the Prices method.
type QueryPricesResponse struct {
	// prices defines the list of prices.
	Prices    map[string]string `protobuf:"bytes,1,rep,name=prices,proto3" json:"prices" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Timestamp time.Time         `protobuf:"bytes,2,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
}

func (m *QueryPricesResponse) Reset()         { *m = QueryPricesResponse{} }
func (m *QueryPricesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPricesResponse) ProtoMessage()    {}
func (*QueryPricesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88883d464f0f25b, []int{1}
}
func (m *QueryPricesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPricesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPricesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPricesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPricesResponse.Merge(m, src)
}
func (m *QueryPricesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPricesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPricesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPricesResponse proto.InternalMessageInfo

func (m *QueryPricesResponse) GetPrices() map[string]string {
	if m != nil {
		return m.Prices
	}
	return nil
}

func (m *QueryPricesResponse) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

// QueryMarketMapRequest defines the request type for the MarketMap method.
type QueryMarketMapRequest struct {
}

func (m *QueryMarketMapRequest) Reset()         { *m = QueryMarketMapRequest{} }
func (m *QueryMarketMapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMarketMapRequest) ProtoMessage()    {}
func (*QueryMarketMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88883d464f0f25b, []int{2}
}
func (m *QueryMarketMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketMapRequest.Merge(m, src)
}
func (m *QueryMarketMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketMapRequest proto.InternalMessageInfo

// QueryMarketMapResponse defines the response type for the MarketMap method.
type QueryMarketMapResponse struct {
	// market_map defines the current market map configuration.
	MarketMap *types.MarketMap `protobuf:"bytes,1,opt,name=market_map,json=marketMap,proto3" json:"market_map,omitempty"`
}

func (m *QueryMarketMapResponse) Reset()         { *m = QueryMarketMapResponse{} }
func (m *QueryMarketMapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMarketMapResponse) ProtoMessage()    {}
func (*QueryMarketMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88883d464f0f25b, []int{3}
}
func (m *QueryMarketMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketMapResponse.Merge(m, src)
}
func (m *QueryMarketMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketMapResponse proto.InternalMessageInfo

func (m *QueryMarketMapResponse) GetMarketMap() *types.MarketMap {
	if m != nil {
		return m.MarketMap
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryPricesRequest)(nil), "slinky.service.v1.QueryPricesRequest")
	proto.RegisterType((*QueryPricesResponse)(nil), "slinky.service.v1.QueryPricesResponse")
	proto.RegisterMapType((map[string]string)(nil), "slinky.service.v1.QueryPricesResponse.PricesEntry")
	proto.RegisterType((*QueryMarketMapRequest)(nil), "slinky.service.v1.QueryMarketMapRequest")
	proto.RegisterType((*QueryMarketMapResponse)(nil), "slinky.service.v1.QueryMarketMapResponse")
}

func init() { proto.RegisterFile("slinky/service/v1/oracle.proto", fileDescriptor_e88883d464f0f25b) }

var fileDescriptor_e88883d464f0f25b = []byte{
	// 485 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xbf, 0x8f, 0xd3, 0x30,
	0x14, 0xc7, 0xeb, 0x1e, 0x54, 0xc4, 0x5d, 0xc0, 0x14, 0x28, 0x01, 0xd2, 0xa8, 0x08, 0x54, 0x06,
	0x6c, 0x5d, 0x18, 0xf8, 0x21, 0xb1, 0x54, 0x62, 0x3c, 0x71, 0x17, 0x21, 0x21, 0xb1, 0x9c, 0xdc,
	0xc8, 0x84, 0xa8, 0x75, 0x6c, 0x62, 0x27, 0x52, 0x56, 0x24, 0x26, 0x96, 0x93, 0xf8, 0xa7, 0x6e,
	0x3c, 0x89, 0x85, 0x09, 0x50, 0x8b, 0xf8, 0x3b, 0x50, 0x6c, 0xa7, 0x07, 0x3d, 0xd0, 0x75, 0x8a,
	0x9f, 0xbf, 0xef, 0x3d, 0x7f, 0xdf, 0xc7, 0x0e, 0x0c, 0xd4, 0x22, 0xcb, 0xe7, 0x35, 0x51, 0xac,
	0xa8, 0xb2, 0x84, 0x91, 0x6a, 0x97, 0x88, 0x82, 0x26, 0x0b, 0x86, 0x65, 0x21, 0xb4, 0x40, 0x57,
	0xac, 0x8e, 0x9d, 0x8e, 0xab, 0x5d, 0x7f, 0x90, 0x8a, 0x54, 0x18, 0x95, 0x34, 0x2b, 0x9b, 0xe8,
	0xdf, 0x4e, 0x85, 0x48, 0x17, 0x8c, 0x50, 0x99, 0x11, 0x9a, 0xe7, 0x42, 0x53, 0x9d, 0x89, 0x5c,
	0x39, 0x75, 0xe4, 0x54, 0x13, 0xcd, 0xca, 0xb7, 0x44, 0x67, 0x9c, 0x29, 0x4d, 0xb9, 0x74, 0x09,
	0x37, 0x13, 0xa1, 0xb8, 0x50, 0x87, 0xb6, 0xaf, 0x0d, 0x9c, 0x14, 0x3a, 0x8b, 0x9c, 0x16, 0x73,
	0xa6, 0x39, 0x95, 0x8d, 0x49, 0x1b, 0xd8, 0x8c, 0xf1, 0x00, 0xa2, 0x83, 0x92, 0x15, 0xf5, 0x7e,
	0x91, 0x25, 0x4c, 0xc5, 0xec, 0x7d, 0xc9, 0x94, 0x1e, 0xff, 0x02, 0xf0, 0xea, 0x5f, 0xdb, 0x4a,
	0x8a, 0x5c, 0x31, 0xb4, 0x0f, 0x7b, 0xd2, 0xec, 0x0c, 0x41, 0xb8, 0x33, 0xe9, 0x47, 0x11, 0x3e,
	0x33, 0x23, 0xfe, 0x47, 0x1d, 0xb6, 0xe1, 0x8b, 0x5c, 0x17, 0xf5, 0xf4, 0xc2, 0xf1, 0xb7, 0x51,
	0x27, 0x76, 0x7d, 0xd0, 0x14, 0x7a, 0xeb, 0x79, 0x86, 0xdd, 0x10, 0x4c, 0xfa, 0x91, 0x8f, 0xed,
	0xc4, 0xb8, 0x9d, 0x18, 0xbf, 0x6a, 0x33, 0xa6, 0x97, 0x9a, 0xe2, 0xa3, 0xef, 0x23, 0x10, 0x9f,
	0x96, 0xf9, 0x4f, 0x61, 0xff, 0x8f, 0x03, 0xd0, 0x65, 0xb8, 0x33, 0x67, 0xf5, 0x10, 0x84, 0x60,
	0xe2, 0xc5, 0xcd, 0x12, 0x0d, 0xe0, 0xc5, 0x8a, 0x2e, 0x4a, 0x66, 0x0e, 0xf0, 0x62, 0x1b, 0x3c,
	0xeb, 0x3e, 0x01, 0xe3, 0x1b, 0xf0, 0x9a, 0xf1, 0xbb, 0x67, 0x98, 0xec, 0x51, 0xd9, 0x12, 0x78,
	0x0d, 0xaf, 0x6f, 0x0a, 0x8e, 0xc1, 0x73, 0x08, 0x2d, 0xc1, 0x43, 0x4e, 0xa5, 0x39, 0xa5, 0x1f,
	0x05, 0x2d, 0x87, 0x35, 0xe8, 0x86, 0xc4, 0x69, 0xad, 0xc7, 0xdb, 0x65, 0xf4, 0xa9, 0x0b, 0x7b,
	0x2f, 0xcd, 0x33, 0x41, 0x35, 0xec, 0x59, 0xdf, 0xe8, 0xde, 0x79, 0x1c, 0x8d, 0x29, 0xff, 0xfe,
	0x76, 0xb8, 0xc7, 0xe1, 0x87, 0x2f, 0x3f, 0x3f, 0x77, 0x7d, 0x34, 0x24, 0xee, 0xfe, 0xed, 0xbb,
	0x6c, 0x2e, 0xdf, 0x61, 0xff, 0x08, 0xa0, 0xb7, 0xb6, 0x87, 0x26, 0xff, 0xeb, 0xbb, 0x89, 0xc5,
	0x7f, 0xb0, 0x45, 0xa6, 0x33, 0x71, 0xd7, 0x98, 0xb8, 0x83, 0x6e, 0x9d, 0x35, 0xb1, 0xa6, 0x34,
	0x3d, 0x38, 0x5e, 0x06, 0xe0, 0x64, 0x19, 0x80, 0x1f, 0xcb, 0x00, 0x1c, 0xad, 0x82, 0xce, 0xc9,
	0x2a, 0xe8, 0x7c, 0x5d, 0x05, 0x9d, 0x37, 0x8f, 0xd3, 0x4c, 0xbf, 0x2b, 0x67, 0x38, 0x11, 0x9c,
	0xa8, 0x79, 0x26, 0x1f, 0x72, 0x56, 0x91, 0x8d, 0x3f, 0xae, 0xf9, 0xb2, 0x42, 0xb5, 0x9d, 0x75,
	0x2d, 0x99, 0x9a, 0xf5, 0xcc, 0xb3, 0x79, 0xf4, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x54, 0x12, 0xd7,
	0x59, 0x9f, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OracleClient is the client API for Oracle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OracleClient interface {
	// Prices defines a method for fetching the latest prices.
	Prices(ctx context.Context, in *QueryPricesRequest, opts ...grpc.CallOption) (*QueryPricesResponse, error)
	// MarketMap defines a method for fetching the latest market map
	// configuration.
	MarketMap(ctx context.Context, in *QueryMarketMapRequest, opts ...grpc.CallOption) (*QueryMarketMapResponse, error)
}

type oracleClient struct {
	cc grpc1.ClientConn
}

func NewOracleClient(cc grpc1.ClientConn) OracleClient {
	return &oracleClient{cc}
}

func (c *oracleClient) Prices(ctx context.Context, in *QueryPricesRequest, opts ...grpc.CallOption) (*QueryPricesResponse, error) {
	out := new(QueryPricesResponse)
	err := c.cc.Invoke(ctx, "/slinky.service.v1.Oracle/Prices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleClient) MarketMap(ctx context.Context, in *QueryMarketMapRequest, opts ...grpc.CallOption) (*QueryMarketMapResponse, error) {
	out := new(QueryMarketMapResponse)
	err := c.cc.Invoke(ctx, "/slinky.service.v1.Oracle/MarketMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OracleServer is the server API for Oracle service.
type OracleServer interface {
	// Prices defines a method for fetching the latest prices.
	Prices(context.Context, *QueryPricesRequest) (*QueryPricesResponse, error)
	// MarketMap defines a method for fetching the latest market map
	// configuration.
	MarketMap(context.Context, *QueryMarketMapRequest) (*QueryMarketMapResponse, error)
}

// UnimplementedOracleServer can be embedded to have forward compatible implementations.
type UnimplementedOracleServer struct {
}

func (*UnimplementedOracleServer) Prices(ctx context.Context, req *QueryPricesRequest) (*QueryPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prices not implemented")
}
func (*UnimplementedOracleServer) MarketMap(ctx context.Context, req *QueryMarketMapRequest) (*QueryMarketMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketMap not implemented")
}

func RegisterOracleServer(s grpc1.Server, srv OracleServer) {
	s.RegisterService(&_Oracle_serviceDesc, srv)
}

func _Oracle_Prices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleServer).Prices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slinky.service.v1.Oracle/Prices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleServer).Prices(ctx, req.(*QueryPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Oracle_MarketMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMarketMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleServer).MarketMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slinky.service.v1.Oracle/MarketMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleServer).MarketMap(ctx, req.(*QueryMarketMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Oracle_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slinky.service.v1.Oracle",
	HandlerType: (*OracleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prices",
			Handler:    _Oracle_Prices_Handler,
		},
		{
			MethodName: "MarketMap",
			Handler:    _Oracle_MarketMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slinky/service/v1/oracle.proto",
}

func (m *QueryPricesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPricesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPricesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPricesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPricesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPricesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintOracle(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if len(m.Prices) > 0 {
		for k := range m.Prices {
			v := m.Prices[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintOracle(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintOracle(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOracle(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMarketMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryMarketMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MarketMap != nil {
		{
			size, err := m.MarketMap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOracle(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOracle(dAtA []byte, offset int, v uint64) int {
	offset -= sovOracle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryPricesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPricesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Prices) > 0 {
		for k, v := range m.Prices {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovOracle(uint64(len(k))) + 1 + len(v) + sovOracle(uint64(len(v)))
			n += mapEntrySize + 1 + sovOracle(uint64(mapEntrySize))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovOracle(uint64(l))
	return n
}

func (m *QueryMarketMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryMarketMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketMap != nil {
		l = m.MarketMap.Size()
		n += 1 + l + sovOracle(uint64(l))
	}
	return n
}

func sovOracle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOracle(x uint64) (n int) {
	return sovOracle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryPricesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPricesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPricesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPricesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPricesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPricesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prices == nil {
				m.Prices = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOracle
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOracle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOracle
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOracle
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOracle
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthOracle
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthOracle
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOracle(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthOracle
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Prices[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MarketMap == nil {
				m.MarketMap = &types.MarketMap{}
			}
			if err := m.MarketMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOracle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOracle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOracle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOracle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOracle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOracle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOracle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOracle = fmt.Errorf("proto: unexpected end of group")
)
