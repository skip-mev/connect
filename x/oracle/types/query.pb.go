// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: connect/oracle/v2/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/skip-mev/connect/v2/pkg/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetAllCurrencyPairsRequest struct {
}

func (m *GetAllCurrencyPairsRequest) Reset()         { *m = GetAllCurrencyPairsRequest{} }
func (m *GetAllCurrencyPairsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllCurrencyPairsRequest) ProtoMessage()    {}
func (*GetAllCurrencyPairsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85b187574238e3d2, []int{0}
}
func (m *GetAllCurrencyPairsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllCurrencyPairsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllCurrencyPairsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllCurrencyPairsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllCurrencyPairsRequest.Merge(m, src)
}
func (m *GetAllCurrencyPairsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllCurrencyPairsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllCurrencyPairsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllCurrencyPairsRequest proto.InternalMessageInfo

// GetAllCurrencyPairsResponse returns all CurrencyPairs that the module is
// currently tracking.
type GetAllCurrencyPairsResponse struct {
	CurrencyPairs []types.CurrencyPair `protobuf:"bytes,1,rep,name=currency_pairs,json=currencyPairs,proto3" json:"currency_pairs"`
}

func (m *GetAllCurrencyPairsResponse) Reset()         { *m = GetAllCurrencyPairsResponse{} }
func (m *GetAllCurrencyPairsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllCurrencyPairsResponse) ProtoMessage()    {}
func (*GetAllCurrencyPairsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85b187574238e3d2, []int{1}
}
func (m *GetAllCurrencyPairsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllCurrencyPairsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllCurrencyPairsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllCurrencyPairsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllCurrencyPairsResponse.Merge(m, src)
}
func (m *GetAllCurrencyPairsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllCurrencyPairsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllCurrencyPairsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllCurrencyPairsResponse proto.InternalMessageInfo

func (m *GetAllCurrencyPairsResponse) GetCurrencyPairs() []types.CurrencyPair {
	if m != nil {
		return m.CurrencyPairs
	}
	return nil
}

// GetPriceRequest takes an identifier for the
// CurrencyPair in the format base/quote.
type GetPriceRequest struct {
	// CurrencyPair represents the pair that the user wishes to query.
	CurrencyPair string `protobuf:"bytes,1,opt,name=currency_pair,json=currencyPair,proto3" json:"currency_pair,omitempty"`
}

func (m *GetPriceRequest) Reset()         { *m = GetPriceRequest{} }
func (m *GetPriceRequest) String() string { return proto.CompactTextString(m) }
func (*GetPriceRequest) ProtoMessage()    {}
func (*GetPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85b187574238e3d2, []int{2}
}
func (m *GetPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPriceRequest.Merge(m, src)
}
func (m *GetPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPriceRequest proto.InternalMessageInfo

func (m *GetPriceRequest) GetCurrencyPair() string {
	if m != nil {
		return m.CurrencyPair
	}
	return ""
}

// GetPriceResponse is the response from the GetPrice grpc method exposed from
// the x/oracle query service.
type GetPriceResponse struct {
	// QuotePrice represents the quote-price for the CurrencyPair given in
	// GetPriceRequest (possibly nil if no update has been made)
	Price *QuotePrice `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	// nonce represents the nonce for the CurrencyPair if it exists in state
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// decimals represents the number of decimals that the quote-price is
	// represented in. It is used to scale the QuotePrice to its proper value.
	Decimals uint64 `protobuf:"varint,3,opt,name=decimals,proto3" json:"decimals,omitempty"`
	// ID represents the identifier for the CurrencyPair.
	Id uint64 `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetPriceResponse) Reset()         { *m = GetPriceResponse{} }
func (m *GetPriceResponse) String() string { return proto.CompactTextString(m) }
func (*GetPriceResponse) ProtoMessage()    {}
func (*GetPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85b187574238e3d2, []int{3}
}
func (m *GetPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPriceResponse.Merge(m, src)
}
func (m *GetPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPriceResponse proto.InternalMessageInfo

func (m *GetPriceResponse) GetPrice() *QuotePrice {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *GetPriceResponse) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *GetPriceResponse) GetDecimals() uint64 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *GetPriceResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// GetPricesRequest takes an identifier for the CurrencyPair
// in the format base/quote.
type GetPricesRequest struct {
	CurrencyPairIds []string `protobuf:"bytes,1,rep,name=currency_pair_ids,json=currencyPairIds,proto3" json:"currency_pair_ids,omitempty"`
}

func (m *GetPricesRequest) Reset()         { *m = GetPricesRequest{} }
func (m *GetPricesRequest) String() string { return proto.CompactTextString(m) }
func (*GetPricesRequest) ProtoMessage()    {}
func (*GetPricesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85b187574238e3d2, []int{4}
}
func (m *GetPricesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPricesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPricesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPricesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPricesRequest.Merge(m, src)
}
func (m *GetPricesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPricesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPricesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPricesRequest proto.InternalMessageInfo

func (m *GetPricesRequest) GetCurrencyPairIds() []string {
	if m != nil {
		return m.CurrencyPairIds
	}
	return nil
}

// GetPricesResponse is the response from the GetPrices grpc method exposed from
// the x/oracle query service.
type GetPricesResponse struct {
	Prices []GetPriceResponse `protobuf:"bytes,1,rep,name=prices,proto3" json:"prices"`
}

func (m *GetPricesResponse) Reset()         { *m = GetPricesResponse{} }
func (m *GetPricesResponse) String() string { return proto.CompactTextString(m) }
func (*GetPricesResponse) ProtoMessage()    {}
func (*GetPricesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85b187574238e3d2, []int{5}
}
func (m *GetPricesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPricesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPricesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPricesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPricesResponse.Merge(m, src)
}
func (m *GetPricesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPricesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPricesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPricesResponse proto.InternalMessageInfo

func (m *GetPricesResponse) GetPrices() []GetPriceResponse {
	if m != nil {
		return m.Prices
	}
	return nil
}

// GetCurrencyPairMappingRequest is the GetCurrencyPairMapping request type.
type GetCurrencyPairMappingRequest struct {
}

func (m *GetCurrencyPairMappingRequest) Reset()         { *m = GetCurrencyPairMappingRequest{} }
func (m *GetCurrencyPairMappingRequest) String() string { return proto.CompactTextString(m) }
func (*GetCurrencyPairMappingRequest) ProtoMessage()    {}
func (*GetCurrencyPairMappingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85b187574238e3d2, []int{6}
}
func (m *GetCurrencyPairMappingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCurrencyPairMappingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCurrencyPairMappingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCurrencyPairMappingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrencyPairMappingRequest.Merge(m, src)
}
func (m *GetCurrencyPairMappingRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCurrencyPairMappingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrencyPairMappingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrencyPairMappingRequest proto.InternalMessageInfo

// GetCurrencyPairMappingResponse is the GetCurrencyPairMapping response type.
type GetCurrencyPairMappingResponse struct {
	// currency_pair_mapping is a mapping of the id representing the currency pair
	// to the currency pair itself.
	CurrencyPairMapping map[uint64]types.CurrencyPair `protobuf:"bytes,1,rep,name=currency_pair_mapping,json=currencyPairMapping,proto3" json:"currency_pair_mapping" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GetCurrencyPairMappingResponse) Reset()         { *m = GetCurrencyPairMappingResponse{} }
func (m *GetCurrencyPairMappingResponse) String() string { return proto.CompactTextString(m) }
func (*GetCurrencyPairMappingResponse) ProtoMessage()    {}
func (*GetCurrencyPairMappingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85b187574238e3d2, []int{7}
}
func (m *GetCurrencyPairMappingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCurrencyPairMappingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCurrencyPairMappingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCurrencyPairMappingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrencyPairMappingResponse.Merge(m, src)
}
func (m *GetCurrencyPairMappingResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCurrencyPairMappingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrencyPairMappingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrencyPairMappingResponse proto.InternalMessageInfo

func (m *GetCurrencyPairMappingResponse) GetCurrencyPairMapping() map[uint64]types.CurrencyPair {
	if m != nil {
		return m.CurrencyPairMapping
	}
	return nil
}

// GetCurrencyPairMappingRequest is the GetCurrencyPairMapping request type.
type GetCurrencyPairMappingListRequest struct {
}

func (m *GetCurrencyPairMappingListRequest) Reset()         { *m = GetCurrencyPairMappingListRequest{} }
func (m *GetCurrencyPairMappingListRequest) String() string { return proto.CompactTextString(m) }
func (*GetCurrencyPairMappingListRequest) ProtoMessage()    {}
func (*GetCurrencyPairMappingListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85b187574238e3d2, []int{8}
}
func (m *GetCurrencyPairMappingListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCurrencyPairMappingListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCurrencyPairMappingListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCurrencyPairMappingListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrencyPairMappingListRequest.Merge(m, src)
}
func (m *GetCurrencyPairMappingListRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCurrencyPairMappingListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrencyPairMappingListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrencyPairMappingListRequest proto.InternalMessageInfo

type CurrencyPairMapping struct {
	// ID is the unique identifier for this currency pair string.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// CurrencyPair is the human-readable representation of the currency pair.
	CurrencyPair types.CurrencyPair `protobuf:"bytes,2,opt,name=currency_pair,json=currencyPair,proto3" json:"currency_pair"`
}

func (m *CurrencyPairMapping) Reset()         { *m = CurrencyPairMapping{} }
func (m *CurrencyPairMapping) String() string { return proto.CompactTextString(m) }
func (*CurrencyPairMapping) ProtoMessage()    {}
func (*CurrencyPairMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_85b187574238e3d2, []int{9}
}
func (m *CurrencyPairMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrencyPairMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrencyPairMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrencyPairMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrencyPairMapping.Merge(m, src)
}
func (m *CurrencyPairMapping) XXX_Size() int {
	return m.Size()
}
func (m *CurrencyPairMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrencyPairMapping.DiscardUnknown(m)
}

var xxx_messageInfo_CurrencyPairMapping proto.InternalMessageInfo

func (m *CurrencyPairMapping) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CurrencyPairMapping) GetCurrencyPair() types.CurrencyPair {
	if m != nil {
		return m.CurrencyPair
	}
	return types.CurrencyPair{}
}

// GetCurrencyPairMappingResponse is the GetCurrencyPairMapping response type.
type GetCurrencyPairMappingListResponse struct {
	// mappings is a list of the id representing the currency pair
	// to the currency pair itself.
	Mappings []CurrencyPairMapping `protobuf:"bytes,1,rep,name=mappings,proto3" json:"mappings"`
}

func (m *GetCurrencyPairMappingListResponse) Reset()         { *m = GetCurrencyPairMappingListResponse{} }
func (m *GetCurrencyPairMappingListResponse) String() string { return proto.CompactTextString(m) }
func (*GetCurrencyPairMappingListResponse) ProtoMessage()    {}
func (*GetCurrencyPairMappingListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85b187574238e3d2, []int{10}
}
func (m *GetCurrencyPairMappingListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCurrencyPairMappingListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCurrencyPairMappingListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCurrencyPairMappingListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrencyPairMappingListResponse.Merge(m, src)
}
func (m *GetCurrencyPairMappingListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCurrencyPairMappingListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrencyPairMappingListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrencyPairMappingListResponse proto.InternalMessageInfo

func (m *GetCurrencyPairMappingListResponse) GetMappings() []CurrencyPairMapping {
	if m != nil {
		return m.Mappings
	}
	return nil
}

func init() {
	proto.RegisterType((*GetAllCurrencyPairsRequest)(nil), "connect.oracle.v2.GetAllCurrencyPairsRequest")
	proto.RegisterType((*GetAllCurrencyPairsResponse)(nil), "connect.oracle.v2.GetAllCurrencyPairsResponse")
	proto.RegisterType((*GetPriceRequest)(nil), "connect.oracle.v2.GetPriceRequest")
	proto.RegisterType((*GetPriceResponse)(nil), "connect.oracle.v2.GetPriceResponse")
	proto.RegisterType((*GetPricesRequest)(nil), "connect.oracle.v2.GetPricesRequest")
	proto.RegisterType((*GetPricesResponse)(nil), "connect.oracle.v2.GetPricesResponse")
	proto.RegisterType((*GetCurrencyPairMappingRequest)(nil), "connect.oracle.v2.GetCurrencyPairMappingRequest")
	proto.RegisterType((*GetCurrencyPairMappingResponse)(nil), "connect.oracle.v2.GetCurrencyPairMappingResponse")
	proto.RegisterMapType((map[uint64]types.CurrencyPair)(nil), "connect.oracle.v2.GetCurrencyPairMappingResponse.CurrencyPairMappingEntry")
	proto.RegisterType((*GetCurrencyPairMappingListRequest)(nil), "connect.oracle.v2.GetCurrencyPairMappingListRequest")
	proto.RegisterType((*CurrencyPairMapping)(nil), "connect.oracle.v2.CurrencyPairMapping")
	proto.RegisterType((*GetCurrencyPairMappingListResponse)(nil), "connect.oracle.v2.GetCurrencyPairMappingListResponse")
}

func init() { proto.RegisterFile("connect/oracle/v2/query.proto", fileDescriptor_85b187574238e3d2) }

var fileDescriptor_85b187574238e3d2 = []byte{
	// 751 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xce, 0xa4, 0x49, 0xd5, 0x9e, 0xde, 0xfe, 0x4d, 0x7b, 0xaf, 0xa2, 0xdc, 0xc6, 0xe9, 0x75,
	0x73, 0x51, 0x55, 0x51, 0x9b, 0xa6, 0x05, 0x51, 0x16, 0x48, 0x2d, 0x42, 0xa1, 0xfc, 0x48, 0xad,
	0x17, 0x2c, 0xd8, 0x44, 0xae, 0x33, 0x84, 0xa1, 0x8e, 0xc7, 0xf5, 0x4c, 0x22, 0xb2, 0x60, 0x83,
	0xd8, 0x17, 0x89, 0x17, 0x80, 0x67, 0xe0, 0x15, 0x58, 0x74, 0x59, 0x89, 0x0d, 0x2b, 0x84, 0x5a,
	0x1e, 0x04, 0x65, 0x3c, 0x4e, 0x9d, 0xd6, 0x09, 0xc9, 0xce, 0xf6, 0x39, 0xdf, 0x39, 0xdf, 0x77,
	0xfe, 0x0c, 0x05, 0x87, 0x79, 0x1e, 0x71, 0x84, 0xc9, 0x02, 0xdb, 0x71, 0x89, 0xd9, 0x2a, 0x9b,
	0xc7, 0x4d, 0x12, 0xb4, 0x0d, 0x3f, 0x60, 0x82, 0xe1, 0x79, 0x65, 0x36, 0x42, 0xb3, 0xd1, 0x2a,
	0xe7, 0x17, 0xeb, 0xac, 0xce, 0xa4, 0xd5, 0xec, 0x3c, 0x85, 0x8e, 0xf9, 0xa5, 0x3a, 0x63, 0x75,
	0x97, 0x98, 0xb6, 0x4f, 0x4d, 0xdb, 0xf3, 0x98, 0xb0, 0x05, 0x65, 0x1e, 0x57, 0xd6, 0xe2, 0xf5,
	0x2c, 0x75, 0xe2, 0x11, 0x4e, 0x23, 0x87, 0x52, 0xe4, 0x20, 0xda, 0x3e, 0xe1, 0x1d, 0xbb, 0xd3,
	0x0c, 0x02, 0xe2, 0x39, 0xed, 0xaa, 0x6f, 0xd3, 0x20, 0xf4, 0xd2, 0x97, 0x20, 0x5f, 0x21, 0x62,
	0xc7, 0x75, 0x1f, 0x28, 0xe3, 0xbe, 0x4d, 0x03, 0x6e, 0x91, 0xe3, 0x26, 0xe1, 0x42, 0x7f, 0x0d,
	0xff, 0x26, 0x5a, 0xb9, 0xcf, 0x3c, 0x4e, 0xf0, 0x13, 0x98, 0xe9, 0x89, 0xc9, 0x73, 0x68, 0x79,
	0x6c, 0x75, 0xaa, 0xac, 0x19, 0x91, 0x46, 0x99, 0xdb, 0x68, 0x95, 0x8d, 0x78, 0x80, 0xdd, 0xcc,
	0xe9, 0x8f, 0x62, 0xca, 0x9a, 0x76, 0xe2, 0x41, 0xf5, 0x3b, 0x30, 0x5b, 0x21, 0x62, 0x3f, 0xa0,
	0x0e, 0x51, 0xe9, 0xf1, 0x0a, 0x4c, 0xf7, 0xc4, 0xcf, 0xa1, 0x65, 0xb4, 0x3a, 0x69, 0xfd, 0x15,
	0x07, 0xea, 0x27, 0x08, 0xe6, 0x2e, 0x81, 0x8a, 0xd9, 0x36, 0x64, 0xfd, 0xce, 0x07, 0x89, 0x98,
	0x2a, 0x17, 0x8c, 0x6b, 0x45, 0x37, 0x0e, 0x9a, 0x4c, 0x10, 0x89, 0x92, 0x7c, 0x90, 0x15, 0x22,
	0xf0, 0x22, 0x64, 0x3d, 0xe6, 0x39, 0x24, 0x97, 0x5e, 0x46, 0xab, 0x19, 0x2b, 0x7c, 0xc1, 0x79,
	0x98, 0xa8, 0x11, 0x87, 0x36, 0x6c, 0x97, 0xe7, 0xc6, 0xa4, 0xa1, 0xfb, 0x8e, 0x67, 0x20, 0x4d,
	0x6b, 0xb9, 0x8c, 0xfc, 0x9a, 0xa6, 0x35, 0xfd, 0xfe, 0x25, 0xa1, 0xa8, 0x92, 0x78, 0x0d, 0xe6,
	0x7b, 0xa4, 0x54, 0x69, 0x2d, 0xac, 0xd6, 0xa4, 0x35, 0x1b, 0x97, 0xb3, 0x57, 0xe3, 0xfa, 0x73,
	0x98, 0x8f, 0xe1, 0x95, 0xa2, 0x1d, 0x18, 0x97, 0xfc, 0xa2, 0x1a, 0xaf, 0x24, 0x48, 0xba, 0x5a,
	0x06, 0x55, 0x68, 0x05, 0xd4, 0x8b, 0x50, 0xa8, 0x10, 0x11, 0xef, 0xc4, 0x33, 0xdb, 0xf7, 0xa9,
	0x57, 0x8f, 0xda, 0x7d, 0x92, 0x06, 0xad, 0x9f, 0x87, 0xa2, 0xf1, 0x1e, 0xc1, 0xdf, 0xbd, 0x42,
	0x1a, 0xa1, 0x87, 0xa2, 0xf5, 0x38, 0x99, 0xd6, 0x80, 0x90, 0x46, 0x82, 0xed, 0xa1, 0x27, 0x82,
	0xb6, 0x62, 0xbf, 0xe0, 0x5c, 0xb7, 0xe7, 0x5f, 0x42, 0xae, 0x1f, 0x0c, 0xcf, 0xc1, 0xd8, 0x11,
	0x69, 0xcb, 0xce, 0x67, 0xac, 0xce, 0x23, 0xde, 0x82, 0x6c, 0xcb, 0x76, 0x9b, 0x61, 0x4b, 0xff,
	0x38, 0x9e, 0x56, 0xe8, 0x7c, 0x2f, 0x7d, 0x17, 0xe9, 0x2b, 0xf0, 0x5f, 0x32, 0xfb, 0xa7, 0x94,
	0x8b, 0xa8, 0x6c, 0x3e, 0x2c, 0x24, 0x78, 0xa8, 0xb1, 0x40, 0xd1, 0x58, 0xe0, 0xbd, 0xab, 0xd3,
	0x3c, 0x14, 0x1b, 0x55, 0x85, 0xde, 0x99, 0xf7, 0x40, 0x1f, 0x44, 0x4b, 0xf5, 0xea, 0x11, 0x4c,
	0xa8, 0xe6, 0x44, 0x43, 0x73, 0x23, 0xa1, 0x3b, 0x09, 0x51, 0x54, 0xce, 0x2e, 0xba, 0xfc, 0x79,
	0x1c, 0xb2, 0x07, 0x9d, 0x1b, 0x86, 0x3f, 0x21, 0x58, 0x48, 0x38, 0x09, 0x78, 0x3d, 0xb9, 0xef,
	0x7d, 0x0e, 0x4b, 0xde, 0x18, 0xd6, 0x3d, 0x94, 0xa2, 0xaf, 0xbd, 0xfb, 0xf6, 0xeb, 0x63, 0xba,
	0x84, 0x75, 0x33, 0xe9, 0xec, 0x89, 0xaa, 0xed, 0xba, 0x55, 0x41, 0x9d, 0x23, 0x12, 0x70, 0xdc,
	0x86, 0x89, 0x68, 0x11, 0xb0, 0x3e, 0x70, 0x4b, 0x42, 0x2e, 0xc3, 0x6c, 0x92, 0x5e, 0x92, 0x04,
	0x34, 0xbc, 0xd4, 0x87, 0x40, 0x78, 0x3b, 0xde, 0xc2, 0x64, 0x77, 0x73, 0xf1, 0xa0, 0xb8, 0xdd,
	0x42, 0x94, 0x06, 0x3b, 0xa9, 0xec, 0xff, 0xcb, 0xec, 0x45, 0x5c, 0x18, 0x94, 0x9d, 0xe3, 0x2f,
	0x08, 0xfe, 0x49, 0x9e, 0x0b, 0x7c, 0x6b, 0x84, 0xbd, 0x0c, 0x99, 0x6d, 0x8c, 0xbc, 0xc9, 0xfa,
	0x96, 0xa4, 0x69, 0xe0, 0x9b, 0x7d, 0x68, 0x26, 0x1e, 0x0e, 0xfc, 0x15, 0xc9, 0x7f, 0x50, 0x9f,
	0x69, 0xc6, 0x5b, 0x43, 0xf3, 0x88, 0xed, 0x64, 0xfe, 0xf6, 0x88, 0x28, 0xa5, 0x60, 0x5b, 0x2a,
	0xd8, 0xc4, 0x1b, 0xa3, 0x28, 0xa8, 0xba, 0x94, 0x8b, 0xdd, 0xca, 0xe9, 0xb9, 0x86, 0xce, 0xce,
	0x35, 0xf4, 0xf3, 0x5c, 0x43, 0x1f, 0x2e, 0xb4, 0xd4, 0xd9, 0x85, 0x96, 0xfa, 0x7e, 0xa1, 0xa5,
	0x5e, 0xac, 0xd7, 0xa9, 0x78, 0xd5, 0x3c, 0x34, 0x1c, 0xd6, 0x30, 0xf9, 0x11, 0xf5, 0xd7, 0x1b,
	0xa4, 0xd5, 0x8d, 0xdf, 0x2a, 0x9b, 0x6f, 0xa2, 0x24, 0xf2, 0x00, 0x1c, 0x8e, 0xcb, 0x3f, 0xf3,
	0xe6, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbc, 0xf8, 0xcc, 0xe9, 0x48, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Get all the currency pairs the x/oracle module is tracking price-data for.
	GetAllCurrencyPairs(ctx context.Context, in *GetAllCurrencyPairsRequest, opts ...grpc.CallOption) (*GetAllCurrencyPairsResponse, error)
	// Given a CurrencyPair (or its identifier) return the latest QuotePrice for
	// that CurrencyPair.
	GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error)
	GetPrices(ctx context.Context, in *GetPricesRequest, opts ...grpc.CallOption) (*GetPricesResponse, error)
	// Get the mapping of currency pair ID -> currency pair. This is useful for
	// indexers that have access to the ID of a currency pair, but no way to get
	// the underlying currency pair from it.
	GetCurrencyPairMapping(ctx context.Context, in *GetCurrencyPairMappingRequest, opts ...grpc.CallOption) (*GetCurrencyPairMappingResponse, error)
	// Get the mapping of currency pair ID <-> currency pair as a list. This is
	// useful for indexers that have access to the ID of a currency pair, but no
	// way to get the underlying currency pair from it.
	GetCurrencyPairMappingList(ctx context.Context, in *GetCurrencyPairMappingListRequest, opts ...grpc.CallOption) (*GetCurrencyPairMappingListResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetAllCurrencyPairs(ctx context.Context, in *GetAllCurrencyPairsRequest, opts ...grpc.CallOption) (*GetAllCurrencyPairsResponse, error) {
	out := new(GetAllCurrencyPairsResponse)
	err := c.cc.Invoke(ctx, "/connect.oracle.v2.Query/GetAllCurrencyPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error) {
	out := new(GetPriceResponse)
	err := c.cc.Invoke(ctx, "/connect.oracle.v2.Query/GetPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPrices(ctx context.Context, in *GetPricesRequest, opts ...grpc.CallOption) (*GetPricesResponse, error) {
	out := new(GetPricesResponse)
	err := c.cc.Invoke(ctx, "/connect.oracle.v2.Query/GetPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCurrencyPairMapping(ctx context.Context, in *GetCurrencyPairMappingRequest, opts ...grpc.CallOption) (*GetCurrencyPairMappingResponse, error) {
	out := new(GetCurrencyPairMappingResponse)
	err := c.cc.Invoke(ctx, "/connect.oracle.v2.Query/GetCurrencyPairMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCurrencyPairMappingList(ctx context.Context, in *GetCurrencyPairMappingListRequest, opts ...grpc.CallOption) (*GetCurrencyPairMappingListResponse, error) {
	out := new(GetCurrencyPairMappingListResponse)
	err := c.cc.Invoke(ctx, "/connect.oracle.v2.Query/GetCurrencyPairMappingList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Get all the currency pairs the x/oracle module is tracking price-data for.
	GetAllCurrencyPairs(context.Context, *GetAllCurrencyPairsRequest) (*GetAllCurrencyPairsResponse, error)
	// Given a CurrencyPair (or its identifier) return the latest QuotePrice for
	// that CurrencyPair.
	GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error)
	GetPrices(context.Context, *GetPricesRequest) (*GetPricesResponse, error)
	// Get the mapping of currency pair ID -> currency pair. This is useful for
	// indexers that have access to the ID of a currency pair, but no way to get
	// the underlying currency pair from it.
	GetCurrencyPairMapping(context.Context, *GetCurrencyPairMappingRequest) (*GetCurrencyPairMappingResponse, error)
	// Get the mapping of currency pair ID <-> currency pair as a list. This is
	// useful for indexers that have access to the ID of a currency pair, but no
	// way to get the underlying currency pair from it.
	GetCurrencyPairMappingList(context.Context, *GetCurrencyPairMappingListRequest) (*GetCurrencyPairMappingListResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetAllCurrencyPairs(ctx context.Context, req *GetAllCurrencyPairsRequest) (*GetAllCurrencyPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCurrencyPairs not implemented")
}
func (*UnimplementedQueryServer) GetPrice(ctx context.Context, req *GetPriceRequest) (*GetPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrice not implemented")
}
func (*UnimplementedQueryServer) GetPrices(ctx context.Context, req *GetPricesRequest) (*GetPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrices not implemented")
}
func (*UnimplementedQueryServer) GetCurrencyPairMapping(ctx context.Context, req *GetCurrencyPairMappingRequest) (*GetCurrencyPairMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencyPairMapping not implemented")
}
func (*UnimplementedQueryServer) GetCurrencyPairMappingList(ctx context.Context, req *GetCurrencyPairMappingListRequest) (*GetCurrencyPairMappingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencyPairMappingList not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetAllCurrencyPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCurrencyPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllCurrencyPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.oracle.v2.Query/GetAllCurrencyPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllCurrencyPairs(ctx, req.(*GetAllCurrencyPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.oracle.v2.Query/GetPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPrice(ctx, req.(*GetPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.oracle.v2.Query/GetPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPrices(ctx, req.(*GetPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCurrencyPairMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrencyPairMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCurrencyPairMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.oracle.v2.Query/GetCurrencyPairMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCurrencyPairMapping(ctx, req.(*GetCurrencyPairMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCurrencyPairMappingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrencyPairMappingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCurrencyPairMappingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.oracle.v2.Query/GetCurrencyPairMappingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCurrencyPairMappingList(ctx, req.(*GetCurrencyPairMappingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "connect.oracle.v2.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllCurrencyPairs",
			Handler:    _Query_GetAllCurrencyPairs_Handler,
		},
		{
			MethodName: "GetPrice",
			Handler:    _Query_GetPrice_Handler,
		},
		{
			MethodName: "GetPrices",
			Handler:    _Query_GetPrices_Handler,
		},
		{
			MethodName: "GetCurrencyPairMapping",
			Handler:    _Query_GetCurrencyPairMapping_Handler,
		},
		{
			MethodName: "GetCurrencyPairMappingList",
			Handler:    _Query_GetCurrencyPairMappingList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connect/oracle/v2/query.proto",
}

func (m *GetAllCurrencyPairsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllCurrencyPairsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllCurrencyPairsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetAllCurrencyPairsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllCurrencyPairsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllCurrencyPairsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrencyPairs) > 0 {
		for iNdEx := len(m.CurrencyPairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrencyPairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrencyPair) > 0 {
		i -= len(m.CurrencyPair)
		copy(dAtA[i:], m.CurrencyPair)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CurrencyPair)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.Decimals != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x18
	}
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.Price != nil {
		{
			size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPricesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPricesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPricesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrencyPairIds) > 0 {
		for iNdEx := len(m.CurrencyPairIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CurrencyPairIds[iNdEx])
			copy(dAtA[i:], m.CurrencyPairIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.CurrencyPairIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetPricesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPricesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPricesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prices) > 0 {
		for iNdEx := len(m.Prices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Prices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetCurrencyPairMappingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrencyPairMappingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCurrencyPairMappingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetCurrencyPairMappingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrencyPairMappingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCurrencyPairMappingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrencyPairMapping) > 0 {
		for k := range m.CurrencyPairMapping {
			v := m.CurrencyPairMapping[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintQuery(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetCurrencyPairMappingListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrencyPairMappingListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCurrencyPairMappingListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CurrencyPairMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrencyPairMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrencyPairMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CurrencyPair.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCurrencyPairMappingListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrencyPairMappingListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCurrencyPairMappingListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mappings) > 0 {
		for iNdEx := len(m.Mappings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mappings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetAllCurrencyPairsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetAllCurrencyPairsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CurrencyPairs) > 0 {
		for _, e := range m.CurrencyPairs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CurrencyPair)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Price != nil {
		l = m.Price.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	if m.Decimals != 0 {
		n += 1 + sovQuery(uint64(m.Decimals))
	}
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *GetPricesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CurrencyPairIds) > 0 {
		for _, s := range m.CurrencyPairIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetPricesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Prices) > 0 {
		for _, e := range m.Prices {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetCurrencyPairMappingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetCurrencyPairMappingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CurrencyPairMapping) > 0 {
		for k, v := range m.CurrencyPairMapping {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovQuery(uint64(k)) + 1 + l + sovQuery(uint64(l))
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GetCurrencyPairMappingListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CurrencyPairMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	l = m.CurrencyPair.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetCurrencyPairMappingListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mappings) > 0 {
		for _, e := range m.Mappings {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetAllCurrencyPairsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllCurrencyPairsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllCurrencyPairsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllCurrencyPairsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllCurrencyPairsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllCurrencyPairsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrencyPairs = append(m.CurrencyPairs, types.CurrencyPair{})
			if err := m.CurrencyPairs[len(m.CurrencyPairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyPair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrencyPair = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Price == nil {
				m.Price = &QuotePrice{}
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPricesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPricesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPricesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyPairIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrencyPairIds = append(m.CurrencyPairIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPricesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPricesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPricesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prices = append(m.Prices, GetPriceResponse{})
			if err := m.Prices[len(m.Prices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCurrencyPairMappingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrencyPairMappingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrencyPairMappingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCurrencyPairMappingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrencyPairMappingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrencyPairMappingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyPairMapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrencyPairMapping == nil {
				m.CurrencyPairMapping = make(map[uint64]types.CurrencyPair)
			}
			var mapkey uint64
			mapvalue := &types.CurrencyPair{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &types.CurrencyPair{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CurrencyPairMapping[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCurrencyPairMappingListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrencyPairMappingListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrencyPairMappingListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrencyPairMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrencyPairMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrencyPairMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrencyPair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCurrencyPairMappingListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrencyPairMappingListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrencyPairMappingListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mappings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mappings = append(m.Mappings, CurrencyPairMapping{})
			if err := m.Mappings[len(m.Mappings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
