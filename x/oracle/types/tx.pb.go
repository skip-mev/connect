// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: slinky/oracle/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/skip-mev/connect/v2/pkg/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Given an authority + a set of CurrencyPairs, the x/oracle module will
// check to see that the authority has permissions to update the set of
// CurrencyPairs tracked in the oracle, and add the given CurrencyPairs to be
// tracked in each VoteExtension
type MsgAddCurrencyPairs struct {
	// authority is the address of the account that is authorized to update the
	// x/oracle's CurrencyPairs
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// set of CurrencyPairs to be added to the module (+ prices if they are to be
	// set)
	CurrencyPairs []types.CurrencyPair `protobuf:"bytes,2,rep,name=currency_pairs,json=currencyPairs,proto3" json:"currency_pairs"`
}

func (m *MsgAddCurrencyPairs) Reset()         { *m = MsgAddCurrencyPairs{} }
func (m *MsgAddCurrencyPairs) String() string { return proto.CompactTextString(m) }
func (*MsgAddCurrencyPairs) ProtoMessage()    {}
func (*MsgAddCurrencyPairs) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cd987ee4c7d5236, []int{0}
}
func (m *MsgAddCurrencyPairs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddCurrencyPairs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddCurrencyPairs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddCurrencyPairs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddCurrencyPairs.Merge(m, src)
}
func (m *MsgAddCurrencyPairs) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddCurrencyPairs) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddCurrencyPairs.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddCurrencyPairs proto.InternalMessageInfo

func (m *MsgAddCurrencyPairs) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgAddCurrencyPairs) GetCurrencyPairs() []types.CurrencyPair {
	if m != nil {
		return m.CurrencyPairs
	}
	return nil
}

type MsgAddCurrencyPairsResponse struct {
}

func (m *MsgAddCurrencyPairsResponse) Reset()         { *m = MsgAddCurrencyPairsResponse{} }
func (m *MsgAddCurrencyPairsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddCurrencyPairsResponse) ProtoMessage()    {}
func (*MsgAddCurrencyPairsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cd987ee4c7d5236, []int{1}
}
func (m *MsgAddCurrencyPairsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddCurrencyPairsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddCurrencyPairsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddCurrencyPairsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddCurrencyPairsResponse.Merge(m, src)
}
func (m *MsgAddCurrencyPairsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddCurrencyPairsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddCurrencyPairsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddCurrencyPairsResponse proto.InternalMessageInfo

// Given an authority + a set of CurrencyPairIDs, the x/oracle module's message
// service will remove all of the CurrencyPairs identified by each
// CurrencyPairID in the request from state. Notice, if a given currency-pair
// does not exist in state, the module ignores that currency-pair and continues
// removing the rest.
type MsgRemoveCurrencyPairs struct {
	// authority is the address of the account that is authorized to update the
	// x/oracle's CurrencyPairs
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// currency_pair_ids are the stringified representation of a currency-pairs
	// (base/quote) to be removed from the module's state
	CurrencyPairIds []string `protobuf:"bytes,2,rep,name=currency_pair_ids,json=currencyPairIds,proto3" json:"currency_pair_ids,omitempty"`
}

func (m *MsgRemoveCurrencyPairs) Reset()         { *m = MsgRemoveCurrencyPairs{} }
func (m *MsgRemoveCurrencyPairs) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveCurrencyPairs) ProtoMessage()    {}
func (*MsgRemoveCurrencyPairs) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cd987ee4c7d5236, []int{2}
}
func (m *MsgRemoveCurrencyPairs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveCurrencyPairs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveCurrencyPairs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveCurrencyPairs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveCurrencyPairs.Merge(m, src)
}
func (m *MsgRemoveCurrencyPairs) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveCurrencyPairs) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveCurrencyPairs.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveCurrencyPairs proto.InternalMessageInfo

func (m *MsgRemoveCurrencyPairs) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgRemoveCurrencyPairs) GetCurrencyPairIds() []string {
	if m != nil {
		return m.CurrencyPairIds
	}
	return nil
}

type MsgRemoveCurrencyPairsResponse struct {
}

func (m *MsgRemoveCurrencyPairsResponse) Reset()         { *m = MsgRemoveCurrencyPairsResponse{} }
func (m *MsgRemoveCurrencyPairsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveCurrencyPairsResponse) ProtoMessage()    {}
func (*MsgRemoveCurrencyPairsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cd987ee4c7d5236, []int{3}
}
func (m *MsgRemoveCurrencyPairsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveCurrencyPairsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveCurrencyPairsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveCurrencyPairsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveCurrencyPairsResponse.Merge(m, src)
}
func (m *MsgRemoveCurrencyPairsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveCurrencyPairsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveCurrencyPairsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveCurrencyPairsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAddCurrencyPairs)(nil), "slinky.oracle.v1.MsgAddCurrencyPairs")
	proto.RegisterType((*MsgAddCurrencyPairsResponse)(nil), "slinky.oracle.v1.MsgAddCurrencyPairsResponse")
	proto.RegisterType((*MsgRemoveCurrencyPairs)(nil), "slinky.oracle.v1.MsgRemoveCurrencyPairs")
	proto.RegisterType((*MsgRemoveCurrencyPairsResponse)(nil), "slinky.oracle.v1.MsgRemoveCurrencyPairsResponse")
}

func init() { proto.RegisterFile("slinky/oracle/v1/tx.proto", fileDescriptor_1cd987ee4c7d5236) }

var fileDescriptor_1cd987ee4c7d5236 = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x4f, 0x8b, 0xd3, 0x40,
	0x14, 0xcf, 0xb8, 0x2a, 0x74, 0x44, 0xdd, 0xcd, 0x2e, 0xda, 0x8d, 0x6c, 0xb6, 0x54, 0x84, 0x52,
	0xe8, 0x8c, 0xad, 0xe0, 0x61, 0x6f, 0x5b, 0x0f, 0xa2, 0x50, 0x90, 0xec, 0xcd, 0x4b, 0xc9, 0x26,
	0xc3, 0x74, 0xd8, 0x4d, 0x26, 0xce, 0x9b, 0x86, 0xcd, 0x4d, 0x3c, 0x7a, 0xf2, 0x23, 0xf8, 0x11,
	0x7a, 0xf0, 0xe0, 0x47, 0xd8, 0xe3, 0x22, 0x08, 0x9e, 0x44, 0xda, 0x43, 0xf5, 0x5b, 0x48, 0x93,
	0x09, 0x6d, 0xdd, 0x1c, 0x56, 0xd8, 0x4b, 0xc8, 0x7b, 0xef, 0x37, 0xef, 0xf7, 0x27, 0x13, 0xbc,
	0x0b, 0xa7, 0x22, 0x3e, 0xc9, 0xa8, 0x54, 0x7e, 0x70, 0xca, 0x68, 0xda, 0xa5, 0xfa, 0x8c, 0x24,
	0x4a, 0x6a, 0x69, 0x6f, 0x16, 0x23, 0x52, 0x8c, 0x48, 0xda, 0x75, 0xdc, 0x4b, 0x60, 0xce, 0x62,
	0x06, 0x02, 0x8a, 0x13, 0xce, 0x6e, 0x20, 0x21, 0x92, 0x30, 0xcc, 0x2b, 0x5a, 0x14, 0x66, 0xf4,
	0xb0, 0xa8, 0x68, 0x04, 0x7c, 0x71, 0x2e, 0x02, 0x6e, 0x06, 0x5b, 0x7e, 0x24, 0x62, 0x49, 0xf3,
	0xa7, 0x69, 0xed, 0x70, 0xc9, 0x65, 0xb1, 0x63, 0xf1, 0x66, 0xba, 0x8f, 0x0d, 0xb9, 0xce, 0x12,
	0x06, 0x8b, 0x1d, 0xc1, 0x58, 0x29, 0x16, 0x07, 0xd9, 0x30, 0xf1, 0x85, 0x2a, 0x40, 0xcd, 0xef,
	0x08, 0x6f, 0x0f, 0x80, 0x1f, 0x86, 0xe1, 0x0b, 0x33, 0x7d, 0xe3, 0x0b, 0x05, 0xf6, 0x73, 0x5c,
	0xf3, 0xc7, 0x7a, 0x24, 0x95, 0xd0, 0x59, 0x1d, 0x35, 0x50, 0xab, 0xd6, 0xaf, 0x7f, 0xfb, 0xd2,
	0xd9, 0x31, 0x1a, 0x0f, 0xc3, 0x50, 0x31, 0x80, 0x23, 0xad, 0x44, 0xcc, 0xbd, 0x25, 0xd4, 0x7e,
	0x8d, 0xef, 0xad, 0xd1, 0x40, 0xfd, 0x46, 0x63, 0xa3, 0x75, 0xa7, 0xb7, 0x47, 0x4c, 0x38, 0xb9,
	0x1a, 0x92, 0x76, 0xc9, 0x2a, 0x5f, 0xff, 0xe6, 0xf9, 0xcf, 0x7d, 0xcb, 0xbb, 0x1b, 0xac, 0x6a,
	0x38, 0x38, 0xf8, 0xfd, 0x79, 0xdf, 0xfa, 0x30, 0x9f, 0xb4, 0x97, 0xfb, 0x3f, 0xce, 0x27, 0xed,
	0xd2, 0xd7, 0x59, 0x19, 0x6b, 0x85, 0xfe, 0xe6, 0x1e, 0x7e, 0x54, 0xd1, 0xf6, 0x18, 0x24, 0x32,
	0x06, 0xd6, 0xfc, 0x8a, 0xf0, 0x83, 0x01, 0x70, 0x8f, 0x45, 0x32, 0x65, 0xd7, 0xe3, 0xbc, 0x8d,
	0xb7, 0xd6, 0x9c, 0x0f, 0x45, 0x58, 0x98, 0xaf, 0x79, 0xf7, 0x57, 0x7d, 0xbd, 0x0a, 0xff, 0xcb,
	0xd9, 0x11, 0xd3, 0xeb, 0xce, 0x1a, 0xd8, 0xad, 0x56, 0x5e, 0x9a, 0xeb, 0xfd, 0x41, 0x78, 0x63,
	0x00, 0xdc, 0x1e, 0xe1, 0xcd, 0x4b, 0xdf, 0xf5, 0x09, 0xf9, 0xf7, 0x92, 0x92, 0x8a, 0x9c, 0x9c,
	0xce, 0x95, 0x60, 0x25, 0xa3, 0xfd, 0x0e, 0x6f, 0x57, 0x45, 0xd9, 0xaa, 0xdc, 0x52, 0x81, 0x74,
	0x9e, 0x5e, 0x15, 0x59, 0x52, 0x3a, 0xb7, 0xde, 0xcf, 0x27, 0x6d, 0xd4, 0x7f, 0x79, 0x3e, 0x75,
	0xd1, 0xc5, 0xd4, 0x45, 0xbf, 0xa6, 0x2e, 0xfa, 0x34, 0x73, 0xad, 0x8b, 0x99, 0x6b, 0xfd, 0x98,
	0xb9, 0xd6, 0xdb, 0x0e, 0x17, 0x7a, 0x34, 0x3e, 0x26, 0x81, 0x8c, 0x28, 0x9c, 0x88, 0xa4, 0x13,
	0xb1, 0x94, 0x06, 0x32, 0x8e, 0x59, 0xa0, 0x69, 0xda, 0x5b, 0x86, 0x9c, 0xdf, 0xc8, 0xe3, 0xdb,
	0xf9, 0xff, 0xf0, 0xec, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3f, 0xab, 0x45, 0x62, 0xe0, 0x03,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// AddCurrencyPairs will be used only by governance to update the set of
	// available CurrencyPairs. Given a set of CurrencyPair objects, update
	// the available currency pairs in the module .
	AddCurrencyPairs(ctx context.Context, in *MsgAddCurrencyPairs, opts ...grpc.CallOption) (*MsgAddCurrencyPairsResponse, error)
	// RemoveCurrencyPairs will be used explicitly by governance to remove the
	// given set of currency-pairs from the module's state. Thus these
	// CurrencyPairs will no longer have price-data available from this module.
	RemoveCurrencyPairs(ctx context.Context, in *MsgRemoveCurrencyPairs, opts ...grpc.CallOption) (*MsgRemoveCurrencyPairsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddCurrencyPairs(ctx context.Context, in *MsgAddCurrencyPairs, opts ...grpc.CallOption) (*MsgAddCurrencyPairsResponse, error) {
	out := new(MsgAddCurrencyPairsResponse)
	err := c.cc.Invoke(ctx, "/slinky.oracle.v1.Msg/AddCurrencyPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveCurrencyPairs(ctx context.Context, in *MsgRemoveCurrencyPairs, opts ...grpc.CallOption) (*MsgRemoveCurrencyPairsResponse, error) {
	out := new(MsgRemoveCurrencyPairsResponse)
	err := c.cc.Invoke(ctx, "/slinky.oracle.v1.Msg/RemoveCurrencyPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// AddCurrencyPairs will be used only by governance to update the set of
	// available CurrencyPairs. Given a set of CurrencyPair objects, update
	// the available currency pairs in the module .
	AddCurrencyPairs(context.Context, *MsgAddCurrencyPairs) (*MsgAddCurrencyPairsResponse, error)
	// RemoveCurrencyPairs will be used explicitly by governance to remove the
	// given set of currency-pairs from the module's state. Thus these
	// CurrencyPairs will no longer have price-data available from this module.
	RemoveCurrencyPairs(context.Context, *MsgRemoveCurrencyPairs) (*MsgRemoveCurrencyPairsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AddCurrencyPairs(ctx context.Context, req *MsgAddCurrencyPairs) (*MsgAddCurrencyPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCurrencyPairs not implemented")
}
func (*UnimplementedMsgServer) RemoveCurrencyPairs(ctx context.Context, req *MsgRemoveCurrencyPairs) (*MsgRemoveCurrencyPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCurrencyPairs not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AddCurrencyPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddCurrencyPairs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddCurrencyPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slinky.oracle.v1.Msg/AddCurrencyPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddCurrencyPairs(ctx, req.(*MsgAddCurrencyPairs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveCurrencyPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveCurrencyPairs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveCurrencyPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slinky.oracle.v1.Msg/RemoveCurrencyPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveCurrencyPairs(ctx, req.(*MsgRemoveCurrencyPairs))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slinky.oracle.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCurrencyPairs",
			Handler:    _Msg_AddCurrencyPairs_Handler,
		},
		{
			MethodName: "RemoveCurrencyPairs",
			Handler:    _Msg_RemoveCurrencyPairs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slinky/oracle/v1/tx.proto",
}

func (m *MsgAddCurrencyPairs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddCurrencyPairs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddCurrencyPairs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrencyPairs) > 0 {
		for iNdEx := len(m.CurrencyPairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrencyPairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddCurrencyPairsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddCurrencyPairsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddCurrencyPairsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveCurrencyPairs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveCurrencyPairs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveCurrencyPairs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrencyPairIds) > 0 {
		for iNdEx := len(m.CurrencyPairIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CurrencyPairIds[iNdEx])
			copy(dAtA[i:], m.CurrencyPairIds[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.CurrencyPairIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveCurrencyPairsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveCurrencyPairsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveCurrencyPairsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAddCurrencyPairs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.CurrencyPairs) > 0 {
		for _, e := range m.CurrencyPairs {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddCurrencyPairsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveCurrencyPairs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.CurrencyPairIds) > 0 {
		for _, s := range m.CurrencyPairIds {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgRemoveCurrencyPairsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAddCurrencyPairs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddCurrencyPairs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddCurrencyPairs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrencyPairs = append(m.CurrencyPairs, types.CurrencyPair{})
			if err := m.CurrencyPairs[len(m.CurrencyPairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddCurrencyPairsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddCurrencyPairsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddCurrencyPairsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveCurrencyPairs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveCurrencyPairs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveCurrencyPairs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyPairIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrencyPairIds = append(m.CurrencyPairIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveCurrencyPairsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveCurrencyPairsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveCurrencyPairsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
