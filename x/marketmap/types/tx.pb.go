// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: connect/marketmap/v2/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_sortkeys "github.com/cosmos/gogoproto/sortkeys"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpsertMarkets defines a message carrying a payload for performing market
// upserts (update or create if does not exist) in the x/marketmap module.
type MsgUpsertMarkets struct {
	// Authority is the signer of this transaction.  This authority must be
	// authorized by the module to execute the message.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// CreateMarkets is the list of all markets to be created for the given
	// transaction.
	Markets []Market `protobuf:"bytes,2,rep,name=markets,proto3" json:"markets"`
}

func (m *MsgUpsertMarkets) Reset()         { *m = MsgUpsertMarkets{} }
func (m *MsgUpsertMarkets) String() string { return proto.CompactTextString(m) }
func (*MsgUpsertMarkets) ProtoMessage()    {}
func (*MsgUpsertMarkets) Descriptor() ([]byte, []int) {
	return fileDescriptor_37df9476ca9a2f81, []int{0}
}
func (m *MsgUpsertMarkets) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpsertMarkets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpsertMarkets.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpsertMarkets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpsertMarkets.Merge(m, src)
}
func (m *MsgUpsertMarkets) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpsertMarkets) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpsertMarkets.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpsertMarkets proto.InternalMessageInfo

func (m *MsgUpsertMarkets) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpsertMarkets) GetMarkets() []Market {
	if m != nil {
		return m.Markets
	}
	return nil
}

// MsgUpsertMarketsResponse is the response from the UpsertMarkets API in the
// x/marketmap module.
type MsgUpsertMarketsResponse struct {
	// UpdatedMarkets is a map between the ticker and whether the market was
	// updated.
	// Deprecated: This field will be empty in all responses.
	MarketUpdates map[string]bool `protobuf:"bytes,1,rep,name=market_updates,json=marketUpdates,proto3" json:"market_updates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // Deprecated: Do not use.
}

func (m *MsgUpsertMarketsResponse) Reset()         { *m = MsgUpsertMarketsResponse{} }
func (m *MsgUpsertMarketsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpsertMarketsResponse) ProtoMessage()    {}
func (*MsgUpsertMarketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37df9476ca9a2f81, []int{1}
}
func (m *MsgUpsertMarketsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpsertMarketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MsgUpsertMarketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpsertMarketsResponse.Merge(m, src)
}
func (m *MsgUpsertMarketsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpsertMarketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpsertMarketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpsertMarketsResponse proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *MsgUpsertMarketsResponse) GetMarketUpdates() map[string]bool {
	if m != nil {
		return m.MarketUpdates
	}
	return nil
}

// MsgCreateMarkets defines a message carrying a payload for creating markets in
// the x/marketmap module.
type MsgCreateMarkets struct {
	// Authority is the signer of this transaction.  This authority must be
	// authorized by the module to execute the message.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// CreateMarkets is the list of all markets to be created for the given
	// transaction.
	CreateMarkets []Market `protobuf:"bytes,2,rep,name=create_markets,json=createMarkets,proto3" json:"create_markets"`
}

func (m *MsgCreateMarkets) Reset()         { *m = MsgCreateMarkets{} }
func (m *MsgCreateMarkets) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMarkets) ProtoMessage()    {}
func (*MsgCreateMarkets) Descriptor() ([]byte, []int) {
	return fileDescriptor_37df9476ca9a2f81, []int{2}
}
func (m *MsgCreateMarkets) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMarkets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMarkets.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMarkets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMarkets.Merge(m, src)
}
func (m *MsgCreateMarkets) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMarkets) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMarkets.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMarkets proto.InternalMessageInfo

func (m *MsgCreateMarkets) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgCreateMarkets) GetCreateMarkets() []Market {
	if m != nil {
		return m.CreateMarkets
	}
	return nil
}

// MsgUpdateMarketMapResponse is the response message for MsgUpdateMarketMap.
type MsgCreateMarketsResponse struct {
}

func (m *MsgCreateMarketsResponse) Reset()         { *m = MsgCreateMarketsResponse{} }
func (m *MsgCreateMarketsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateMarketsResponse) ProtoMessage()    {}
func (*MsgCreateMarketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37df9476ca9a2f81, []int{3}
}
func (m *MsgCreateMarketsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateMarketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateMarketsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateMarketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateMarketsResponse.Merge(m, src)
}
func (m *MsgCreateMarketsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateMarketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateMarketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateMarketsResponse proto.InternalMessageInfo

// MsgUpdateMarkets defines a message carrying a payload for updating the
// x/marketmap module.
type MsgUpdateMarkets struct {
	// Authority is the signer of this transaction.  This authority must be
	// authorized by the module to execute the message.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// UpdateMarkets is the list of all markets to be updated for the given
	// transaction.
	UpdateMarkets []Market `protobuf:"bytes,2,rep,name=update_markets,json=updateMarkets,proto3" json:"update_markets"`
}

func (m *MsgUpdateMarkets) Reset()         { *m = MsgUpdateMarkets{} }
func (m *MsgUpdateMarkets) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMarkets) ProtoMessage()    {}
func (*MsgUpdateMarkets) Descriptor() ([]byte, []int) {
	return fileDescriptor_37df9476ca9a2f81, []int{4}
}
func (m *MsgUpdateMarkets) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMarkets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMarkets.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMarkets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMarkets.Merge(m, src)
}
func (m *MsgUpdateMarkets) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMarkets) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMarkets.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMarkets proto.InternalMessageInfo

func (m *MsgUpdateMarkets) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateMarkets) GetUpdateMarkets() []Market {
	if m != nil {
		return m.UpdateMarkets
	}
	return nil
}

// MsgUpdateMarketsResponse is the response message for MsgUpdateMarkets.
type MsgUpdateMarketsResponse struct {
}

func (m *MsgUpdateMarketsResponse) Reset()         { *m = MsgUpdateMarketsResponse{} }
func (m *MsgUpdateMarketsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMarketsResponse) ProtoMessage()    {}
func (*MsgUpdateMarketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37df9476ca9a2f81, []int{5}
}
func (m *MsgUpdateMarketsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMarketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMarketsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMarketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMarketsResponse.Merge(m, src)
}
func (m *MsgUpdateMarketsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMarketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMarketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMarketsResponse proto.InternalMessageInfo

// MsgParams defines the Msg/Params request type. It contains the
// new parameters for the x/marketmap module.
type MsgParams struct {
	// Params defines the new parameters for the x/marketmap module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// Authority defines the authority that is updating the x/marketmap module
	// parameters.
	Authority string `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (m *MsgParams) Reset()         { *m = MsgParams{} }
func (m *MsgParams) String() string { return proto.CompactTextString(m) }
func (*MsgParams) ProtoMessage()    {}
func (*MsgParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_37df9476ca9a2f81, []int{6}
}
func (m *MsgParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgParams.Merge(m, src)
}
func (m *MsgParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgParams proto.InternalMessageInfo

func (m *MsgParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *MsgParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

// MsgParamsResponse defines the Msg/Params response type.
type MsgParamsResponse struct {
}

func (m *MsgParamsResponse) Reset()         { *m = MsgParamsResponse{} }
func (m *MsgParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgParamsResponse) ProtoMessage()    {}
func (*MsgParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37df9476ca9a2f81, []int{7}
}
func (m *MsgParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgParamsResponse.Merge(m, src)
}
func (m *MsgParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgParamsResponse proto.InternalMessageInfo

// MsgRemoveMarketAuthorities defines the Msg/RemoveMarketAuthoritiesResponse
// request type. It contains the new addresses to remove from the list of
// authorities
type MsgRemoveMarketAuthorities struct {
	// RemoveAddresses is the list of addresses to remove.
	RemoveAddresses []string `protobuf:"bytes,1,rep,name=remove_addresses,json=removeAddresses,proto3" json:"remove_addresses,omitempty"`
	// Admin defines the authority that is the x/marketmap
	// Admin account.  This account is set in the module parameters.
	Admin string `protobuf:"bytes,2,opt,name=admin,proto3" json:"admin,omitempty"`
}

func (m *MsgRemoveMarketAuthorities) Reset()         { *m = MsgRemoveMarketAuthorities{} }
func (m *MsgRemoveMarketAuthorities) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveMarketAuthorities) ProtoMessage()    {}
func (*MsgRemoveMarketAuthorities) Descriptor() ([]byte, []int) {
	return fileDescriptor_37df9476ca9a2f81, []int{8}
}
func (m *MsgRemoveMarketAuthorities) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveMarketAuthorities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveMarketAuthorities.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveMarketAuthorities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveMarketAuthorities.Merge(m, src)
}
func (m *MsgRemoveMarketAuthorities) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveMarketAuthorities) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveMarketAuthorities.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveMarketAuthorities proto.InternalMessageInfo

func (m *MsgRemoveMarketAuthorities) GetRemoveAddresses() []string {
	if m != nil {
		return m.RemoveAddresses
	}
	return nil
}

func (m *MsgRemoveMarketAuthorities) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

// MsgRemoveMarketAuthoritiesResponse defines the
// Msg/RemoveMarketAuthoritiesResponse response type.
type MsgRemoveMarketAuthoritiesResponse struct {
}

func (m *MsgRemoveMarketAuthoritiesResponse) Reset()         { *m = MsgRemoveMarketAuthoritiesResponse{} }
func (m *MsgRemoveMarketAuthoritiesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveMarketAuthoritiesResponse) ProtoMessage()    {}
func (*MsgRemoveMarketAuthoritiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37df9476ca9a2f81, []int{9}
}
func (m *MsgRemoveMarketAuthoritiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveMarketAuthoritiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveMarketAuthoritiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveMarketAuthoritiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveMarketAuthoritiesResponse.Merge(m, src)
}
func (m *MsgRemoveMarketAuthoritiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveMarketAuthoritiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveMarketAuthoritiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveMarketAuthoritiesResponse proto.InternalMessageInfo

// MsgRemoveMarkets defines the Msg/RemoveMarkets request type. It contains the
// new markets to be removed from the market map.
type MsgRemoveMarkets struct {
	// Admin defines the authority that is the x/marketmap
	// Admin account.  This account is set in the module parameters.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// Markets is the list of markets to remove.
	Markets []string `protobuf:"bytes,2,rep,name=markets,proto3" json:"markets,omitempty"`
}

func (m *MsgRemoveMarkets) Reset()         { *m = MsgRemoveMarkets{} }
func (m *MsgRemoveMarkets) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveMarkets) ProtoMessage()    {}
func (*MsgRemoveMarkets) Descriptor() ([]byte, []int) {
	return fileDescriptor_37df9476ca9a2f81, []int{10}
}
func (m *MsgRemoveMarkets) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveMarkets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveMarkets.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveMarkets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveMarkets.Merge(m, src)
}
func (m *MsgRemoveMarkets) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveMarkets) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveMarkets.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveMarkets proto.InternalMessageInfo

func (m *MsgRemoveMarkets) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgRemoveMarkets) GetMarkets() []string {
	if m != nil {
		return m.Markets
	}
	return nil
}

// MsgRemoveMarketsResponse defines the
// Msg/MsgRemoveMarketsResponse response type.
type MsgRemoveMarketsResponse struct {
	// DeletedMarkets is the list of markets that were removed.
	DeletedMarkets []string `protobuf:"bytes,1,rep,name=deleted_markets,json=deletedMarkets,proto3" json:"deleted_markets,omitempty"`
}

func (m *MsgRemoveMarketsResponse) Reset()         { *m = MsgRemoveMarketsResponse{} }
func (m *MsgRemoveMarketsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveMarketsResponse) ProtoMessage()    {}
func (*MsgRemoveMarketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37df9476ca9a2f81, []int{11}
}
func (m *MsgRemoveMarketsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveMarketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveMarketsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveMarketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveMarketsResponse.Merge(m, src)
}
func (m *MsgRemoveMarketsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveMarketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveMarketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveMarketsResponse proto.InternalMessageInfo

func (m *MsgRemoveMarketsResponse) GetDeletedMarkets() []string {
	if m != nil {
		return m.DeletedMarkets
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgUpsertMarkets)(nil), "connect.marketmap.v2.MsgUpsertMarkets")
	proto.RegisterType((*MsgUpsertMarketsResponse)(nil), "connect.marketmap.v2.MsgUpsertMarketsResponse")
	proto.RegisterMapType((map[string]bool)(nil), "connect.marketmap.v2.MsgUpsertMarketsResponse.MarketUpdatesEntry")
	proto.RegisterType((*MsgCreateMarkets)(nil), "connect.marketmap.v2.MsgCreateMarkets")
	proto.RegisterType((*MsgCreateMarketsResponse)(nil), "connect.marketmap.v2.MsgCreateMarketsResponse")
	proto.RegisterType((*MsgUpdateMarkets)(nil), "connect.marketmap.v2.MsgUpdateMarkets")
	proto.RegisterType((*MsgUpdateMarketsResponse)(nil), "connect.marketmap.v2.MsgUpdateMarketsResponse")
	proto.RegisterType((*MsgParams)(nil), "connect.marketmap.v2.MsgParams")
	proto.RegisterType((*MsgParamsResponse)(nil), "connect.marketmap.v2.MsgParamsResponse")
	proto.RegisterType((*MsgRemoveMarketAuthorities)(nil), "connect.marketmap.v2.MsgRemoveMarketAuthorities")
	proto.RegisterType((*MsgRemoveMarketAuthoritiesResponse)(nil), "connect.marketmap.v2.MsgRemoveMarketAuthoritiesResponse")
	proto.RegisterType((*MsgRemoveMarkets)(nil), "connect.marketmap.v2.MsgRemoveMarkets")
	proto.RegisterType((*MsgRemoveMarketsResponse)(nil), "connect.marketmap.v2.MsgRemoveMarketsResponse")
}

func init() { proto.RegisterFile("connect/marketmap/v2/tx.proto", fileDescriptor_37df9476ca9a2f81) }

var fileDescriptor_37df9476ca9a2f81 = []byte{
	// 745 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4f, 0x4f, 0x13, 0x41,
	0x14, 0xef, 0x14, 0x8a, 0x76, 0xb4, 0x05, 0xc6, 0x26, 0xac, 0x1b, 0x6d, 0x71, 0x43, 0x0a, 0x92,
	0xb0, 0x8b, 0x35, 0x31, 0xa4, 0x7a, 0xb0, 0x25, 0x1e, 0x34, 0x69, 0x62, 0xd6, 0x90, 0x18, 0x2f,
	0xcd, 0xd2, 0x9d, 0x2c, 0x1b, 0xd8, 0x3f, 0xd9, 0x99, 0x6e, 0xe0, 0x66, 0x34, 0x5e, 0xbc, 0x68,
	0x3c, 0x79, 0xd4, 0x6f, 0xc0, 0xc1, 0xaf, 0x60, 0xc2, 0x91, 0x70, 0xf2, 0x64, 0x0c, 0x1c, 0xf0,
	0x63, 0x98, 0xee, 0x4c, 0x97, 0x1d, 0xe8, 0x96, 0x56, 0xbd, 0xc0, 0xec, 0x7b, 0xbf, 0xf7, 0xde,
	0xef, 0xfd, 0x99, 0x37, 0x85, 0xb7, 0x3b, 0x9e, 0xeb, 0xe2, 0x0e, 0xd5, 0x1c, 0x23, 0xd8, 0xc6,
	0xd4, 0x31, 0x7c, 0x2d, 0xac, 0x69, 0x74, 0x57, 0xf5, 0x03, 0x8f, 0x7a, 0xa8, 0xc4, 0xd5, 0x6a,
	0xac, 0x56, 0xc3, 0x9a, 0x3c, 0xd7, 0xf1, 0x88, 0xe3, 0x11, 0xcd, 0x21, 0x96, 0x16, 0xde, 0xeb,
	0xfd, 0x63, 0x70, 0xb9, 0x64, 0x79, 0x96, 0x17, 0x1d, 0xb5, 0xde, 0x89, 0x4b, 0x6f, 0x32, 0x78,
	0x9b, 0x29, 0xd8, 0x07, 0x57, 0xcd, 0x1a, 0x8e, 0xed, 0x7a, 0x5a, 0xf4, 0x97, 0x8b, 0xee, 0x0c,
	0x64, 0xc4, 0x3e, 0x86, 0x42, 0x7c, 0x23, 0x30, 0x1c, 0xee, 0x58, 0xf9, 0x0e, 0xe0, 0x4c, 0x8b,
	0x58, 0x1b, 0x3e, 0xc1, 0x01, 0x6d, 0x45, 0x30, 0x82, 0x1e, 0xc0, 0xbc, 0xd1, 0xa5, 0x5b, 0x5e,
	0x60, 0xd3, 0x3d, 0x09, 0xcc, 0x83, 0xa5, 0x7c, 0x53, 0x3a, 0xfa, 0xb6, 0x52, 0xe2, 0x94, 0x1a,
	0xa6, 0x19, 0x60, 0x42, 0x5e, 0xd0, 0xc0, 0x76, 0x2d, 0xfd, 0x0c, 0x8a, 0x1e, 0xc1, 0x2b, 0x2c,
	0x12, 0x91, 0xb2, 0xf3, 0x13, 0x4b, 0xd7, 0x6a, 0xb7, 0xd4, 0x41, 0x75, 0x51, 0x59, 0x9c, 0xe6,
	0xe4, 0xc1, 0xcf, 0x4a, 0x46, 0xef, 0x9b, 0xd4, 0x1f, 0xfe, 0xfe, 0x52, 0xc9, 0xbc, 0x39, 0xdd,
	0x5f, 0x3e, 0xf3, 0xf8, 0xfe, 0x74, 0x7f, 0x79, 0xa1, 0x9f, 0xc4, 0x6e, 0x22, 0x8d, 0xf3, 0x94,
	0x95, 0x43, 0x00, 0xa5, 0xf3, 0x42, 0x1d, 0x13, 0xdf, 0x73, 0x09, 0x46, 0x3b, 0xb0, 0xc8, 0x4c,
	0xdb, 0x5d, 0xdf, 0x34, 0x28, 0x26, 0x12, 0x88, 0xe8, 0x35, 0x52, 0xe8, 0xa5, 0xf8, 0xe1, 0xbc,
	0x37, 0x98, 0x8f, 0x27, 0x2e, 0x0d, 0xf6, 0x9a, 0x59, 0x09, 0xe8, 0x05, 0x27, 0x29, 0x97, 0x1f,
	0x43, 0x74, 0x11, 0x88, 0x66, 0xe0, 0xc4, 0x36, 0xe6, 0xd5, 0xd4, 0x7b, 0x47, 0x54, 0x82, 0xb9,
	0xd0, 0xd8, 0xe9, 0x62, 0x29, 0x3b, 0x0f, 0x96, 0xae, 0xea, 0xec, 0xa3, 0x9e, 0x5d, 0x03, 0xf5,
	0xc9, 0xcf, 0x5f, 0x2b, 0x40, 0x39, 0x62, 0xad, 0x59, 0x0f, 0xb0, 0x41, 0xf1, 0xbf, 0xb6, 0xe6,
	0x29, 0x2c, 0x76, 0x22, 0x47, 0xed, 0xf1, 0x3b, 0x54, 0xe8, 0x24, 0x29, 0x8c, 0xdb, 0x27, 0x81,
	0xbf, 0x22, 0x47, 0x6d, 0x12, 0x64, 0xfd, 0xf2, 0xf6, 0x13, 0x66, 0x65, 0xfb, 0x0f, 0x09, 0xb3,
	0x66, 0xff, 0x4d, 0xc2, 0xdd, 0x24, 0x85, 0xf1, 0x07, 0xd3, 0xbc, 0x90, 0xb0, 0x20, 0x8b, 0x13,
	0xfe, 0x00, 0x60, 0xbe, 0x45, 0xac, 0xe7, 0xd1, 0x85, 0x44, 0x75, 0x38, 0xc5, 0xae, 0x66, 0x94,
	0x66, 0x2a, 0x53, 0x86, 0xe6, 0x4c, 0xb9, 0x85, 0x58, 0xa5, 0xec, 0xc8, 0x55, 0xaa, 0x17, 0xc5,
	0xb4, 0x94, 0x1b, 0x70, 0x36, 0x26, 0x14, 0xd3, 0x7c, 0x0b, 0xa0, 0xdc, 0x22, 0x96, 0x8e, 0x1d,
	0x2f, 0xe4, 0x39, 0x34, 0xb8, 0x85, 0x8d, 0x09, 0xba, 0x0b, 0x67, 0x82, 0x48, 0xd5, 0x36, 0x58,
	0x18, 0x7e, 0xbf, 0xf2, 0xfa, 0x34, 0x93, 0x37, 0xfa, 0x62, 0xa4, 0xc2, 0x9c, 0x61, 0x3a, 0xb6,
	0x7b, 0x29, 0x45, 0x06, 0xab, 0xc3, 0x1e, 0x3d, 0x76, 0x56, 0x16, 0xa0, 0x92, 0x4e, 0x22, 0xe6,
	0xba, 0x15, 0x8d, 0x50, 0x12, 0x95, 0x88, 0x0a, 0x46, 0x8a, 0x8a, 0x24, 0x71, 0x8d, 0xe5, 0xcf,
	0x56, 0x54, 0x92, 0xcf, 0x7a, 0xd4, 0x58, 0x21, 0x52, 0xbc, 0x70, 0x16, 0xe1, 0xb4, 0x89, 0x77,
	0x30, 0xc5, 0x66, 0x3c, 0x7d, 0xac, 0x22, 0x45, 0x2e, 0xe6, 0x06, 0xb5, 0x4f, 0x39, 0x38, 0xd1,
	0x22, 0x16, 0xb2, 0x60, 0x41, 0xbc, 0xe7, 0xd5, 0xd4, 0xd5, 0x24, 0xe0, 0x64, 0x75, 0x34, 0x5c,
	0xcc, 0xcc, 0x82, 0x05, 0xf1, 0x7e, 0x55, 0x87, 0xec, 0x40, 0x73, 0xa4, 0x40, 0x03, 0x67, 0x1b,
	0xbd, 0x84, 0xd7, 0x99, 0x82, 0x4f, 0x77, 0x25, 0xd5, 0x9e, 0x01, 0xe4, 0xc5, 0x4b, 0x00, 0xb1,
	0xe7, 0x77, 0x00, 0xce, 0xa5, 0xcd, 0xe2, 0x6a, 0xaa, 0x93, 0x14, 0x0b, 0x79, 0x6d, 0x5c, 0x0b,
	0xb1, 0x94, 0xc9, 0x67, 0xb3, 0x3a, 0xda, 0x73, 0x32, 0xb4, 0x94, 0x83, 0x9e, 0x2f, 0x0b, 0x16,
	0xc4, 0x81, 0xae, 0x8e, 0xc4, 0x79, 0x58, 0xa0, 0x81, 0x63, 0x2b, 0xe7, 0x5e, 0x9f, 0xee, 0x2f,
	0x83, 0xe6, 0xb3, 0x83, 0xe3, 0x32, 0x38, 0x3c, 0x2e, 0x83, 0x5f, 0xc7, 0x65, 0xf0, 0xf1, 0xa4,
	0x9c, 0x39, 0x3c, 0x29, 0x67, 0x7e, 0x9c, 0x94, 0x33, 0xaf, 0x56, 0x2d, 0x9b, 0x6e, 0x75, 0x37,
	0xd5, 0x8e, 0xe7, 0x68, 0x64, 0xdb, 0xf6, 0x57, 0x1c, 0x1c, 0x6a, 0xfd, 0x35, 0x18, 0xd6, 0x84,
	0x4d, 0x48, 0xf7, 0x7c, 0x4c, 0x36, 0xa7, 0xa2, 0x9f, 0x19, 0xf7, 0xff, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x17, 0x6d, 0xc6, 0xd8, 0x40, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateMarkets creates markets from the given message.
	CreateMarkets(ctx context.Context, in *MsgCreateMarkets, opts ...grpc.CallOption) (*MsgCreateMarketsResponse, error)
	// UpdateMarkets updates markets from the given message.
	UpdateMarkets(ctx context.Context, in *MsgUpdateMarkets, opts ...grpc.CallOption) (*MsgUpdateMarketsResponse, error)
	// UpdateParams defines a method for updating the x/marketmap module
	// parameters.
	UpdateParams(ctx context.Context, in *MsgParams, opts ...grpc.CallOption) (*MsgParamsResponse, error)
	// RemoveMarketAuthorities defines a method for removing market authorities
	// from the x/marketmap module. the signer must be the admin.
	RemoveMarketAuthorities(ctx context.Context, in *MsgRemoveMarketAuthorities, opts ...grpc.CallOption) (*MsgRemoveMarketAuthoritiesResponse, error)
	// UpsertMarkets wraps both Create / Update markets into a single message.
	// Specifically if a market does not exist it will be created, otherwise it
	// will be updated. The response will be a map between ticker -> updated.
	UpsertMarkets(ctx context.Context, in *MsgUpsertMarkets, opts ...grpc.CallOption) (*MsgUpsertMarketsResponse, error)
	// RemoveMarkets removes the given markets from the marketmap if:
	// - they exist in the map
	// - they are disabled
	RemoveMarkets(ctx context.Context, in *MsgRemoveMarkets, opts ...grpc.CallOption) (*MsgRemoveMarketsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateMarkets(ctx context.Context, in *MsgCreateMarkets, opts ...grpc.CallOption) (*MsgCreateMarketsResponse, error) {
	out := new(MsgCreateMarketsResponse)
	err := c.cc.Invoke(ctx, "/connect.marketmap.v2.Msg/CreateMarkets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMarkets(ctx context.Context, in *MsgUpdateMarkets, opts ...grpc.CallOption) (*MsgUpdateMarketsResponse, error) {
	out := new(MsgUpdateMarketsResponse)
	err := c.cc.Invoke(ctx, "/connect.marketmap.v2.Msg/UpdateMarkets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgParams, opts ...grpc.CallOption) (*MsgParamsResponse, error) {
	out := new(MsgParamsResponse)
	err := c.cc.Invoke(ctx, "/connect.marketmap.v2.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveMarketAuthorities(ctx context.Context, in *MsgRemoveMarketAuthorities, opts ...grpc.CallOption) (*MsgRemoveMarketAuthoritiesResponse, error) {
	out := new(MsgRemoveMarketAuthoritiesResponse)
	err := c.cc.Invoke(ctx, "/connect.marketmap.v2.Msg/RemoveMarketAuthorities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpsertMarkets(ctx context.Context, in *MsgUpsertMarkets, opts ...grpc.CallOption) (*MsgUpsertMarketsResponse, error) {
	out := new(MsgUpsertMarketsResponse)
	err := c.cc.Invoke(ctx, "/connect.marketmap.v2.Msg/UpsertMarkets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveMarkets(ctx context.Context, in *MsgRemoveMarkets, opts ...grpc.CallOption) (*MsgRemoveMarketsResponse, error) {
	out := new(MsgRemoveMarketsResponse)
	err := c.cc.Invoke(ctx, "/connect.marketmap.v2.Msg/RemoveMarkets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateMarkets creates markets from the given message.
	CreateMarkets(context.Context, *MsgCreateMarkets) (*MsgCreateMarketsResponse, error)
	// UpdateMarkets updates markets from the given message.
	UpdateMarkets(context.Context, *MsgUpdateMarkets) (*MsgUpdateMarketsResponse, error)
	// UpdateParams defines a method for updating the x/marketmap module
	// parameters.
	UpdateParams(context.Context, *MsgParams) (*MsgParamsResponse, error)
	// RemoveMarketAuthorities defines a method for removing market authorities
	// from the x/marketmap module. the signer must be the admin.
	RemoveMarketAuthorities(context.Context, *MsgRemoveMarketAuthorities) (*MsgRemoveMarketAuthoritiesResponse, error)
	// UpsertMarkets wraps both Create / Update markets into a single message.
	// Specifically if a market does not exist it will be created, otherwise it
	// will be updated. The response will be a map between ticker -> updated.
	UpsertMarkets(context.Context, *MsgUpsertMarkets) (*MsgUpsertMarketsResponse, error)
	// RemoveMarkets removes the given markets from the marketmap if:
	// - they exist in the map
	// - they are disabled
	RemoveMarkets(context.Context, *MsgRemoveMarkets) (*MsgRemoveMarketsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateMarkets(ctx context.Context, req *MsgCreateMarkets) (*MsgCreateMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMarkets not implemented")
}
func (*UnimplementedMsgServer) UpdateMarkets(ctx context.Context, req *MsgUpdateMarkets) (*MsgUpdateMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMarkets not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgParams) (*MsgParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) RemoveMarketAuthorities(ctx context.Context, req *MsgRemoveMarketAuthorities) (*MsgRemoveMarketAuthoritiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMarketAuthorities not implemented")
}
func (*UnimplementedMsgServer) UpsertMarkets(ctx context.Context, req *MsgUpsertMarkets) (*MsgUpsertMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertMarkets not implemented")
}
func (*UnimplementedMsgServer) RemoveMarkets(ctx context.Context, req *MsgRemoveMarkets) (*MsgRemoveMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMarkets not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateMarkets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.marketmap.v2.Msg/CreateMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateMarkets(ctx, req.(*MsgCreateMarkets))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMarkets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.marketmap.v2.Msg/UpdateMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMarkets(ctx, req.(*MsgUpdateMarkets))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.marketmap.v2.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveMarketAuthorities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveMarketAuthorities)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveMarketAuthorities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.marketmap.v2.Msg/RemoveMarketAuthorities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveMarketAuthorities(ctx, req.(*MsgRemoveMarketAuthorities))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpsertMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpsertMarkets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpsertMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.marketmap.v2.Msg/UpsertMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpsertMarkets(ctx, req.(*MsgUpsertMarkets))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveMarkets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.marketmap.v2.Msg/RemoveMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveMarkets(ctx, req.(*MsgRemoveMarkets))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "connect.marketmap.v2.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMarkets",
			Handler:    _Msg_CreateMarkets_Handler,
		},
		{
			MethodName: "UpdateMarkets",
			Handler:    _Msg_UpdateMarkets_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "RemoveMarketAuthorities",
			Handler:    _Msg_RemoveMarketAuthorities_Handler,
		},
		{
			MethodName: "UpsertMarkets",
			Handler:    _Msg_UpsertMarkets_Handler,
		},
		{
			MethodName: "RemoveMarkets",
			Handler:    _Msg_RemoveMarkets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connect/marketmap/v2/tx.proto",
}

func (m *MsgUpsertMarkets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpsertMarkets) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpsertMarkets) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Markets) > 0 {
		for iNdEx := len(m.Markets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Markets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpsertMarketsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpsertMarketsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpsertMarketsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketUpdates) > 0 {
		keysForMarketUpdates := make([]string, 0, len(m.MarketUpdates))
		for k := range m.MarketUpdates {
			keysForMarketUpdates = append(keysForMarketUpdates, string(k))
		}
		github_com_cosmos_gogoproto_sortkeys.Strings(keysForMarketUpdates)
		for iNdEx := len(keysForMarketUpdates) - 1; iNdEx >= 0; iNdEx-- {
			v := m.MarketUpdates[string(keysForMarketUpdates[iNdEx])]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i -= len(keysForMarketUpdates[iNdEx])
			copy(dAtA[i:], keysForMarketUpdates[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(keysForMarketUpdates[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTx(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateMarkets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMarkets) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMarkets) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CreateMarkets) > 0 {
		for iNdEx := len(m.CreateMarkets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CreateMarkets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateMarketsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateMarketsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateMarketsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMarkets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMarkets) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMarkets) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UpdateMarkets) > 0 {
		for iNdEx := len(m.UpdateMarkets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UpdateMarkets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMarketsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMarketsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMarketsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveMarketAuthorities) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveMarketAuthorities) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveMarketAuthorities) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RemoveAddresses) > 0 {
		for iNdEx := len(m.RemoveAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RemoveAddresses[iNdEx])
			copy(dAtA[i:], m.RemoveAddresses[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.RemoveAddresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveMarketAuthoritiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveMarketAuthoritiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveMarketAuthoritiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveMarkets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveMarkets) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveMarkets) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Markets) > 0 {
		for iNdEx := len(m.Markets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Markets[iNdEx])
			copy(dAtA[i:], m.Markets[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Markets[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveMarketsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveMarketsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveMarketsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeletedMarkets) > 0 {
		for iNdEx := len(m.DeletedMarkets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeletedMarkets[iNdEx])
			copy(dAtA[i:], m.DeletedMarkets[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.DeletedMarkets[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpsertMarkets) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Markets) > 0 {
		for _, e := range m.Markets {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpsertMarketsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MarketUpdates) > 0 {
		for k, v := range m.MarketUpdates {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTx(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 1 + sovTx(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *MsgCreateMarkets) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.CreateMarkets) > 0 {
		for _, e := range m.CreateMarkets {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgCreateMarketsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateMarkets) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.UpdateMarkets) > 0 {
		for _, e := range m.UpdateMarkets {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateMarketsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveMarketAuthorities) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RemoveAddresses) > 0 {
		for _, s := range m.RemoveAddresses {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveMarketAuthoritiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveMarkets) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Markets) > 0 {
		for _, s := range m.Markets {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgRemoveMarketsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DeletedMarkets) > 0 {
		for _, s := range m.DeletedMarkets {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpsertMarkets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpsertMarkets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpsertMarkets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Markets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Markets = append(m.Markets, Market{})
			if err := m.Markets[len(m.Markets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpsertMarketsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpsertMarketsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpsertMarketsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketUpdates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MarketUpdates == nil {
				m.MarketUpdates = make(map[string]bool)
			}
			var mapkey string
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTx
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTx
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTx(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTx
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MarketUpdates[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMarkets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMarkets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMarkets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateMarkets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateMarkets = append(m.CreateMarkets, Market{})
			if err := m.CreateMarkets[len(m.CreateMarkets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateMarketsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateMarketsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateMarketsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMarkets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMarkets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMarkets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMarkets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateMarkets = append(m.UpdateMarkets, Market{})
			if err := m.UpdateMarkets[len(m.UpdateMarkets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMarketsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMarketsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMarketsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveMarketAuthorities) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveMarketAuthorities: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveMarketAuthorities: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveAddresses = append(m.RemoveAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveMarketAuthoritiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveMarketAuthoritiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveMarketAuthoritiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveMarkets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveMarkets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveMarkets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Markets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Markets = append(m.Markets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveMarketsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveMarketsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveMarketsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedMarkets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedMarkets = append(m.DeletedMarkets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
