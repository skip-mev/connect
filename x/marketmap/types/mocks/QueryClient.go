// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	types "github.com/skip-mev/connect/v2/x/marketmap/types"
)

// QueryClient is an autogenerated mock type for the QueryClient type
type QueryClient struct {
	mock.Mock
}

type QueryClient_Expecter struct {
	mock *mock.Mock
}

func (_m *QueryClient) EXPECT() *QueryClient_Expecter {
	return &QueryClient_Expecter{mock: &_m.Mock}
}

// LastUpdated provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) LastUpdated(ctx context.Context, in *types.LastUpdatedRequest, opts ...grpc.CallOption) (*types.LastUpdatedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LastUpdated")
	}

	var r0 *types.LastUpdatedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.LastUpdatedRequest, ...grpc.CallOption) (*types.LastUpdatedResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.LastUpdatedRequest, ...grpc.CallOption) *types.LastUpdatedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.LastUpdatedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.LastUpdatedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryClient_LastUpdated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastUpdated'
type QueryClient_LastUpdated_Call struct {
	*mock.Call
}

// LastUpdated is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.LastUpdatedRequest
//   - opts ...grpc.CallOption
func (_e *QueryClient_Expecter) LastUpdated(ctx interface{}, in interface{}, opts ...interface{}) *QueryClient_LastUpdated_Call {
	return &QueryClient_LastUpdated_Call{Call: _e.mock.On("LastUpdated",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *QueryClient_LastUpdated_Call) Run(run func(ctx context.Context, in *types.LastUpdatedRequest, opts ...grpc.CallOption)) *QueryClient_LastUpdated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.LastUpdatedRequest), variadicArgs...)
	})
	return _c
}

func (_c *QueryClient_LastUpdated_Call) Return(_a0 *types.LastUpdatedResponse, _a1 error) *QueryClient_LastUpdated_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryClient_LastUpdated_Call) RunAndReturn(run func(context.Context, *types.LastUpdatedRequest, ...grpc.CallOption) (*types.LastUpdatedResponse, error)) *QueryClient_LastUpdated_Call {
	_c.Call.Return(run)
	return _c
}

// Market provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Market(ctx context.Context, in *types.MarketRequest, opts ...grpc.CallOption) (*types.MarketResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Market")
	}

	var r0 *types.MarketResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MarketRequest, ...grpc.CallOption) (*types.MarketResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.MarketRequest, ...grpc.CallOption) *types.MarketResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MarketResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.MarketRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryClient_Market_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Market'
type QueryClient_Market_Call struct {
	*mock.Call
}

// Market is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.MarketRequest
//   - opts ...grpc.CallOption
func (_e *QueryClient_Expecter) Market(ctx interface{}, in interface{}, opts ...interface{}) *QueryClient_Market_Call {
	return &QueryClient_Market_Call{Call: _e.mock.On("Market",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *QueryClient_Market_Call) Run(run func(ctx context.Context, in *types.MarketRequest, opts ...grpc.CallOption)) *QueryClient_Market_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.MarketRequest), variadicArgs...)
	})
	return _c
}

func (_c *QueryClient_Market_Call) Return(_a0 *types.MarketResponse, _a1 error) *QueryClient_Market_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryClient_Market_Call) RunAndReturn(run func(context.Context, *types.MarketRequest, ...grpc.CallOption) (*types.MarketResponse, error)) *QueryClient_Market_Call {
	_c.Call.Return(run)
	return _c
}

// MarketMap provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) MarketMap(ctx context.Context, in *types.MarketMapRequest, opts ...grpc.CallOption) (*types.MarketMapResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MarketMap")
	}

	var r0 *types.MarketMapResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MarketMapRequest, ...grpc.CallOption) (*types.MarketMapResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.MarketMapRequest, ...grpc.CallOption) *types.MarketMapResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MarketMapResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.MarketMapRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryClient_MarketMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarketMap'
type QueryClient_MarketMap_Call struct {
	*mock.Call
}

// MarketMap is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.MarketMapRequest
//   - opts ...grpc.CallOption
func (_e *QueryClient_Expecter) MarketMap(ctx interface{}, in interface{}, opts ...interface{}) *QueryClient_MarketMap_Call {
	return &QueryClient_MarketMap_Call{Call: _e.mock.On("MarketMap",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *QueryClient_MarketMap_Call) Run(run func(ctx context.Context, in *types.MarketMapRequest, opts ...grpc.CallOption)) *QueryClient_MarketMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.MarketMapRequest), variadicArgs...)
	})
	return _c
}

func (_c *QueryClient_MarketMap_Call) Return(_a0 *types.MarketMapResponse, _a1 error) *QueryClient_MarketMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryClient_MarketMap_Call) RunAndReturn(run func(context.Context, *types.MarketMapRequest, ...grpc.CallOption) (*types.MarketMapResponse, error)) *QueryClient_MarketMap_Call {
	_c.Call.Return(run)
	return _c
}

// Markets provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Markets(ctx context.Context, in *types.MarketsRequest, opts ...grpc.CallOption) (*types.MarketsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Markets")
	}

	var r0 *types.MarketsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MarketsRequest, ...grpc.CallOption) (*types.MarketsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.MarketsRequest, ...grpc.CallOption) *types.MarketsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MarketsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.MarketsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryClient_Markets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Markets'
type QueryClient_Markets_Call struct {
	*mock.Call
}

// Markets is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.MarketsRequest
//   - opts ...grpc.CallOption
func (_e *QueryClient_Expecter) Markets(ctx interface{}, in interface{}, opts ...interface{}) *QueryClient_Markets_Call {
	return &QueryClient_Markets_Call{Call: _e.mock.On("Markets",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *QueryClient_Markets_Call) Run(run func(ctx context.Context, in *types.MarketsRequest, opts ...grpc.CallOption)) *QueryClient_Markets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.MarketsRequest), variadicArgs...)
	})
	return _c
}

func (_c *QueryClient_Markets_Call) Return(_a0 *types.MarketsResponse, _a1 error) *QueryClient_Markets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryClient_Markets_Call) RunAndReturn(run func(context.Context, *types.MarketsRequest, ...grpc.CallOption) (*types.MarketsResponse, error)) *QueryClient_Markets_Call {
	_c.Call.Return(run)
	return _c
}

// Params provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Params(ctx context.Context, in *types.ParamsRequest, opts ...grpc.CallOption) (*types.ParamsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Params")
	}

	var r0 *types.ParamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.ParamsRequest, ...grpc.CallOption) (*types.ParamsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.ParamsRequest, ...grpc.CallOption) *types.ParamsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ParamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.ParamsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryClient_Params_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Params'
type QueryClient_Params_Call struct {
	*mock.Call
}

// Params is a helper method to define mock.On call
//   - ctx context.Context
//   - in *types.ParamsRequest
//   - opts ...grpc.CallOption
func (_e *QueryClient_Expecter) Params(ctx interface{}, in interface{}, opts ...interface{}) *QueryClient_Params_Call {
	return &QueryClient_Params_Call{Call: _e.mock.On("Params",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *QueryClient_Params_Call) Run(run func(ctx context.Context, in *types.ParamsRequest, opts ...grpc.CallOption)) *QueryClient_Params_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*types.ParamsRequest), variadicArgs...)
	})
	return _c
}

func (_c *QueryClient_Params_Call) Return(_a0 *types.ParamsResponse, _a1 error) *QueryClient_Params_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryClient_Params_Call) RunAndReturn(run func(context.Context, *types.ParamsRequest, ...grpc.CallOption) (*types.ParamsResponse, error)) *QueryClient_Params_Call {
	_c.Call.Return(run)
	return _c
}

// NewQueryClient creates a new instance of QueryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryClient {
	mock := &QueryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
