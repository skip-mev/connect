// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: slinky/alerts/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AlertStatus is the type for the status of an Alert, it can be Unconcluded or
// Concluded.
type AlertStatusID int32

const (
	AlertStatusID_CONCLUSION_STATUS_UNSPECIFIED AlertStatusID = 0
	AlertStatusID_CONCLUSION_STATUS_UNCONCLUDED AlertStatusID = 1
	AlertStatusID_CONCLUSION_STATUS_CONCLUDED   AlertStatusID = 2
)

var AlertStatusID_name = map[int32]string{
	0: "CONCLUSION_STATUS_UNSPECIFIED",
	1: "CONCLUSION_STATUS_UNCONCLUDED",
	2: "CONCLUSION_STATUS_CONCLUDED",
}

var AlertStatusID_value = map[string]int32{
	"CONCLUSION_STATUS_UNSPECIFIED": 0,
	"CONCLUSION_STATUS_UNCONCLUDED": 1,
	"CONCLUSION_STATUS_CONCLUDED":   2,
}

func (x AlertStatusID) String() string {
	return proto.EnumName(AlertStatusID_name, int32(x))
}

func (AlertStatusID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_800538fad6183f61, []int{0}
}

// AlertsRequest is the request type for the Query.Alerts RPC method, the status
// field indicates whether the request should return only Unconcluded /
// Concluded Alerts, or all Alerts.
type AlertsRequest struct {
	Status AlertStatusID `protobuf:"varint,1,opt,name=status,proto3,enum=slinky.alerts.v1.AlertStatusID" json:"status,omitempty"`
}

func (m *AlertsRequest) Reset()         { *m = AlertsRequest{} }
func (m *AlertsRequest) String() string { return proto.CompactTextString(m) }
func (*AlertsRequest) ProtoMessage()    {}
func (*AlertsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_800538fad6183f61, []int{0}
}
func (m *AlertsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlertsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlertsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlertsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlertsRequest.Merge(m, src)
}
func (m *AlertsRequest) XXX_Size() int {
	return m.Size()
}
func (m *AlertsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AlertsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AlertsRequest proto.InternalMessageInfo

func (m *AlertsRequest) GetStatus() AlertStatusID {
	if m != nil {
		return m.Status
	}
	return AlertStatusID_CONCLUSION_STATUS_UNSPECIFIED
}

// AlertsResponse is the response type for the Query.Alerts RPC method, it
// contains the list of Alerts that are being tracked by the alerts module.
type AlertsResponse struct {
	Alerts []Alert `protobuf:"bytes,1,rep,name=alerts,proto3" json:"alerts"`
}

func (m *AlertsResponse) Reset()         { *m = AlertsResponse{} }
func (m *AlertsResponse) String() string { return proto.CompactTextString(m) }
func (*AlertsResponse) ProtoMessage()    {}
func (*AlertsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_800538fad6183f61, []int{1}
}
func (m *AlertsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlertsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlertsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlertsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlertsResponse.Merge(m, src)
}
func (m *AlertsResponse) XXX_Size() int {
	return m.Size()
}
func (m *AlertsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AlertsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AlertsResponse proto.InternalMessageInfo

func (m *AlertsResponse) GetAlerts() []Alert {
	if m != nil {
		return m.Alerts
	}
	return nil
}

// ParamsRequest is the request type for the Query.Params RPC method.
type ParamsRequest struct {
}

func (m *ParamsRequest) Reset()         { *m = ParamsRequest{} }
func (m *ParamsRequest) String() string { return proto.CompactTextString(m) }
func (*ParamsRequest) ProtoMessage()    {}
func (*ParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_800538fad6183f61, []int{2}
}
func (m *ParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsRequest.Merge(m, src)
}
func (m *ParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsRequest proto.InternalMessageInfo

// ParamsResponse is the response type for the Query.Params RPC method, it
// contains the Params of the module.
type ParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *ParamsResponse) Reset()         { *m = ParamsResponse{} }
func (m *ParamsResponse) String() string { return proto.CompactTextString(m) }
func (*ParamsResponse) ProtoMessage()    {}
func (*ParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_800538fad6183f61, []int{3}
}
func (m *ParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsResponse.Merge(m, src)
}
func (m *ParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsResponse proto.InternalMessageInfo

func (m *ParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterEnum("slinky.alerts.v1.AlertStatusID", AlertStatusID_name, AlertStatusID_value)
	proto.RegisterType((*AlertsRequest)(nil), "slinky.alerts.v1.AlertsRequest")
	proto.RegisterType((*AlertsResponse)(nil), "slinky.alerts.v1.AlertsResponse")
	proto.RegisterType((*ParamsRequest)(nil), "slinky.alerts.v1.ParamsRequest")
	proto.RegisterType((*ParamsResponse)(nil), "slinky.alerts.v1.ParamsResponse")
}

func init() { proto.RegisterFile("slinky/alerts/v1/query.proto", fileDescriptor_800538fad6183f61) }

var fileDescriptor_800538fad6183f61 = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xe3, 0x01, 0x39, 0x78, 0x5a, 0xa9, 0x2c, 0x24, 0xa2, 0xb0, 0xa5, 0x21, 0xa7, 0x09,
	0x69, 0xb1, 0x16, 0x04, 0x9c, 0xb7, 0xa6, 0x6c, 0x91, 0x50, 0x37, 0x9a, 0xf5, 0xc2, 0x65, 0xca,
	0x2a, 0x2b, 0x44, 0x6b, 0xec, 0x34, 0x76, 0x22, 0x7a, 0xe5, 0x13, 0x20, 0xf1, 0xa5, 0x7a, 0xac,
	0xc4, 0x85, 0x13, 0x42, 0x2d, 0x7c, 0x0f, 0xd4, 0x38, 0x16, 0x2a, 0x69, 0xb8, 0x59, 0xef, 0xfd,
	0xfe, 0xff, 0xf7, 0xfc, 0xb7, 0xe1, 0x21, 0x9f, 0x26, 0xf4, 0x7e, 0x8e, 0xa3, 0x29, 0xc9, 0x05,
	0xc7, 0xe5, 0x29, 0x9e, 0x15, 0x24, 0x9f, 0xbb, 0x59, 0xce, 0x04, 0x43, 0x5d, 0xd9, 0x75, 0x65,
	0xd7, 0x2d, 0x4f, 0xcd, 0xc3, 0x98, 0xb1, 0x78, 0x4a, 0x70, 0x94, 0x25, 0x38, 0xa2, 0x94, 0x89,
	0x48, 0x24, 0x8c, 0x72, 0xc9, 0x9b, 0x47, 0x0d, 0xb7, 0x5a, 0x29, 0xdb, 0x56, 0xa3, 0x1d, 0x13,
	0x4a, 0x78, 0xa2, 0xfa, 0x4f, 0x62, 0x16, 0xb3, 0xea, 0x88, 0x37, 0x27, 0x59, 0x75, 0x2e, 0xe1,
	0xc1, 0x59, 0x25, 0x18, 0x91, 0x59, 0x41, 0xb8, 0x40, 0x6f, 0xa0, 0xce, 0x45, 0x24, 0x0a, 0x6e,
	0x00, 0x1b, 0x1c, 0x77, 0xbc, 0x9e, 0xfb, 0xef, 0x9a, 0x6e, 0x25, 0x08, 0x2b, 0x28, 0xf0, 0x47,
	0x35, 0xee, 0x5c, 0xc0, 0x8e, 0x72, 0xe2, 0x19, 0xa3, 0x9c, 0xa0, 0x57, 0x50, 0x97, 0x22, 0x03,
	0xd8, 0x0f, 0x8e, 0xf7, 0xbd, 0xa7, 0x2d, 0x56, 0xe7, 0x0f, 0x17, 0x3f, 0x7a, 0xda, 0xa8, 0x86,
	0x9d, 0xc7, 0xf0, 0xe0, 0x3a, 0xca, 0xa3, 0x54, 0xad, 0xe4, 0x5c, 0xc2, 0x8e, 0x2a, 0xd4, 0xce,
	0xaf, 0xa1, 0x9e, 0x55, 0x95, 0x6a, 0xc9, 0x7d, 0xcf, 0x68, 0x3a, 0x4b, 0x85, 0xb2, 0x96, 0xf4,
	0x8b, 0xb2, 0xbe, 0xad, 0x5a, 0x1e, 0x3d, 0x87, 0x47, 0xfd, 0xab, 0x61, 0xff, 0xdd, 0x38, 0x0c,
	0xae, 0x86, 0xb7, 0xe1, 0xcd, 0xd9, 0xcd, 0x38, 0xbc, 0x1d, 0x0f, 0xc3, 0xeb, 0x41, 0x3f, 0x78,
	0x1b, 0x0c, 0xfc, 0xae, 0xd6, 0x86, 0xc8, 0x9a, 0x3f, 0xf0, 0xbb, 0x00, 0xf5, 0xe0, 0xb3, 0x26,
	0xf2, 0x17, 0xd8, 0xf3, 0x7e, 0x03, 0xf8, 0xe8, 0xfd, 0xe6, 0xe9, 0x51, 0x0a, 0x75, 0x99, 0x12,
	0x6a, 0x0b, 0x56, 0x5d, 0xdb, 0xb4, 0xdb, 0x01, 0x19, 0x83, 0x63, 0x7f, 0xfe, 0xf6, 0xeb, 0xeb,
	0x9e, 0x89, 0x0c, 0xdc, 0xf2, 0x35, 0x36, 0xe3, 0x64, 0x10, 0xbb, 0xc6, 0x6d, 0xa5, 0xbc, 0x6b,
	0xdc, 0x76, 0xea, 0xff, 0x1b, 0x27, 0xf3, 0x3d, 0xbf, 0x58, 0xac, 0x2c, 0xb0, 0x5c, 0x59, 0xe0,
	0xe7, 0xca, 0x02, 0x5f, 0xd6, 0x96, 0xb6, 0x5c, 0x5b, 0xda, 0xf7, 0xb5, 0xa5, 0x7d, 0x38, 0x89,
	0x13, 0xf1, 0xb1, 0xb8, 0x73, 0x27, 0x2c, 0xc5, 0xfc, 0x3e, 0xc9, 0x4e, 0x52, 0x52, 0xe2, 0x09,
	0xa3, 0x94, 0x4c, 0x04, 0x2e, 0x3d, 0xfc, 0x49, 0x99, 0x89, 0x79, 0x46, 0xf8, 0x9d, 0x5e, 0xfd,
	0xce, 0x97, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x13, 0x3b, 0xb1, 0x42, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Alerts gets all alerts in state under the given status. If no status is
	// given, all Alerts are returned
	Alerts(ctx context.Context, in *AlertsRequest, opts ...grpc.CallOption) (*AlertsResponse, error)
	Params(ctx context.Context, in *ParamsRequest, opts ...grpc.CallOption) (*ParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Alerts(ctx context.Context, in *AlertsRequest, opts ...grpc.CallOption) (*AlertsResponse, error) {
	out := new(AlertsResponse)
	err := c.cc.Invoke(ctx, "/slinky.alerts.v1.Query/Alerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *ParamsRequest, opts ...grpc.CallOption) (*ParamsResponse, error) {
	out := new(ParamsResponse)
	err := c.cc.Invoke(ctx, "/slinky.alerts.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Alerts gets all alerts in state under the given status. If no status is
	// given, all Alerts are returned
	Alerts(context.Context, *AlertsRequest) (*AlertsResponse, error)
	Params(context.Context, *ParamsRequest) (*ParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Alerts(ctx context.Context, req *AlertsRequest) (*AlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alerts not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *ParamsRequest) (*ParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Alerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Alerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slinky.alerts.v1.Query/Alerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Alerts(ctx, req.(*AlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slinky.alerts.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*ParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slinky.alerts.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Alerts",
			Handler:    _Query_Alerts_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slinky/alerts/v1/query.proto",
}

func (m *AlertsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlertsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlertsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AlertsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlertsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlertsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Alerts) > 0 {
		for iNdEx := len(m.Alerts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Alerts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AlertsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	return n
}

func (m *AlertsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Alerts) > 0 {
		for _, e := range m.Alerts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AlertsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlertsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlertsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= AlertStatusID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlertsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlertsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlertsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alerts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alerts = append(m.Alerts, Alert{})
			if err := m.Alerts[len(m.Alerts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
