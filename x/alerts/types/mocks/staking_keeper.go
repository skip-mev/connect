// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	math "cosmossdk.io/math"
	cosmos_sdktypes "github.com/cosmos/cosmos-sdk/types"

	mock "github.com/stretchr/testify/mock"

	stakingtypes "github.com/cosmos/cosmos-sdk/x/staking/types"
)

// StakingKeeper is an autogenerated mock type for the StakingKeeper type
type StakingKeeper struct {
	mock.Mock
}

type StakingKeeper_Expecter struct {
	mock *mock.Mock
}

func (_m *StakingKeeper) EXPECT() *StakingKeeper_Expecter {
	return &StakingKeeper_Expecter{mock: &_m.Mock}
}

// BondDenom provides a mock function with given fields: ctx
func (_m *StakingKeeper) BondDenom(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BondDenom")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StakingKeeper_BondDenom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BondDenom'
type StakingKeeper_BondDenom_Call struct {
	*mock.Call
}

// BondDenom is a helper method to define mock.On call
//   - ctx context.Context
func (_e *StakingKeeper_Expecter) BondDenom(ctx interface{}) *StakingKeeper_BondDenom_Call {
	return &StakingKeeper_BondDenom_Call{Call: _e.mock.On("BondDenom", ctx)}
}

func (_c *StakingKeeper_BondDenom_Call) Run(run func(ctx context.Context)) *StakingKeeper_BondDenom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *StakingKeeper_BondDenom_Call) Return(_a0 string, _a1 error) *StakingKeeper_BondDenom_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StakingKeeper_BondDenom_Call) RunAndReturn(run func(context.Context) (string, error)) *StakingKeeper_BondDenom_Call {
	_c.Call.Return(run)
	return _c
}

// GetValidatorByConsAddr provides a mock function with given fields: ctx, consAddr
func (_m *StakingKeeper) GetValidatorByConsAddr(ctx context.Context, consAddr cosmos_sdktypes.ConsAddress) (stakingtypes.Validator, error) {
	ret := _m.Called(ctx, consAddr)

	if len(ret) == 0 {
		panic("no return value specified for GetValidatorByConsAddr")
	}

	var r0 stakingtypes.Validator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.ConsAddress) (stakingtypes.Validator, error)); ok {
		return rf(ctx, consAddr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.ConsAddress) stakingtypes.Validator); ok {
		r0 = rf(ctx, consAddr)
	} else {
		r0 = ret.Get(0).(stakingtypes.Validator)
	}

	if rf, ok := ret.Get(1).(func(context.Context, cosmos_sdktypes.ConsAddress) error); ok {
		r1 = rf(ctx, consAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StakingKeeper_GetValidatorByConsAddr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValidatorByConsAddr'
type StakingKeeper_GetValidatorByConsAddr_Call struct {
	*mock.Call
}

// GetValidatorByConsAddr is a helper method to define mock.On call
//   - ctx context.Context
//   - consAddr cosmos_sdktypes.ConsAddress
func (_e *StakingKeeper_Expecter) GetValidatorByConsAddr(ctx interface{}, consAddr interface{}) *StakingKeeper_GetValidatorByConsAddr_Call {
	return &StakingKeeper_GetValidatorByConsAddr_Call{Call: _e.mock.On("GetValidatorByConsAddr", ctx, consAddr)}
}

func (_c *StakingKeeper_GetValidatorByConsAddr_Call) Run(run func(ctx context.Context, consAddr cosmos_sdktypes.ConsAddress)) *StakingKeeper_GetValidatorByConsAddr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cosmos_sdktypes.ConsAddress))
	})
	return _c
}

func (_c *StakingKeeper_GetValidatorByConsAddr_Call) Return(validator stakingtypes.Validator, err error) *StakingKeeper_GetValidatorByConsAddr_Call {
	_c.Call.Return(validator, err)
	return _c
}

func (_c *StakingKeeper_GetValidatorByConsAddr_Call) RunAndReturn(run func(context.Context, cosmos_sdktypes.ConsAddress) (stakingtypes.Validator, error)) *StakingKeeper_GetValidatorByConsAddr_Call {
	_c.Call.Return(run)
	return _c
}

// Slash provides a mock function with given fields: ctx, consAddr, infractionHeight, power, slashFactor
func (_m *StakingKeeper) Slash(ctx context.Context, consAddr cosmos_sdktypes.ConsAddress, infractionHeight int64, power int64, slashFactor math.LegacyDec) (math.Int, error) {
	ret := _m.Called(ctx, consAddr, infractionHeight, power, slashFactor)

	if len(ret) == 0 {
		panic("no return value specified for Slash")
	}

	var r0 math.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.ConsAddress, int64, int64, math.LegacyDec) (math.Int, error)); ok {
		return rf(ctx, consAddr, infractionHeight, power, slashFactor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.ConsAddress, int64, int64, math.LegacyDec) math.Int); ok {
		r0 = rf(ctx, consAddr, infractionHeight, power, slashFactor)
	} else {
		r0 = ret.Get(0).(math.Int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, cosmos_sdktypes.ConsAddress, int64, int64, math.LegacyDec) error); ok {
		r1 = rf(ctx, consAddr, infractionHeight, power, slashFactor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StakingKeeper_Slash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Slash'
type StakingKeeper_Slash_Call struct {
	*mock.Call
}

// Slash is a helper method to define mock.On call
//   - ctx context.Context
//   - consAddr cosmos_sdktypes.ConsAddress
//   - infractionHeight int64
//   - power int64
//   - slashFactor math.LegacyDec
func (_e *StakingKeeper_Expecter) Slash(ctx interface{}, consAddr interface{}, infractionHeight interface{}, power interface{}, slashFactor interface{}) *StakingKeeper_Slash_Call {
	return &StakingKeeper_Slash_Call{Call: _e.mock.On("Slash", ctx, consAddr, infractionHeight, power, slashFactor)}
}

func (_c *StakingKeeper_Slash_Call) Run(run func(ctx context.Context, consAddr cosmos_sdktypes.ConsAddress, infractionHeight int64, power int64, slashFactor math.LegacyDec)) *StakingKeeper_Slash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cosmos_sdktypes.ConsAddress), args[2].(int64), args[3].(int64), args[4].(math.LegacyDec))
	})
	return _c
}

func (_c *StakingKeeper_Slash_Call) Return(_a0 math.Int, _a1 error) *StakingKeeper_Slash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StakingKeeper_Slash_Call) RunAndReturn(run func(context.Context, cosmos_sdktypes.ConsAddress, int64, int64, math.LegacyDec) (math.Int, error)) *StakingKeeper_Slash_Call {
	_c.Call.Return(run)
	return _c
}

// NewStakingKeeper creates a new instance of StakingKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStakingKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *StakingKeeper {
	mock := &StakingKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
